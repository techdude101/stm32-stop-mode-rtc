
STOP_MODE_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080022ac  080022ac  000122ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022fc  080022fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022fc  080022fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022fc  080022fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022fc  080022fc  000122fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002300  08002300  00012300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002310  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002310  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007151  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000189b  00000000  00000000  00027186  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000830  00000000  00000000  00028a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000758  00000000  00000000  00029258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016757  00000000  00000000  000299b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007161  00000000  00000000  00040107  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000800fe  00000000  00000000  00047268  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7366  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb0  00000000  00000000  000c73e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002294 	.word	0x08002294

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002294 	.word	0x08002294

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa51 	bl	80005f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f817 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8ef 	bl	800033c <MX_GPIO_Init>
  MX_RTC_Init();
 800015e:	f000 f871 	bl	8000244 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8c1 	bl	80002e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t msg[] = "Startup...\r\n";
 8000166:	4b06      	ldr	r3, [pc, #24]	; (8000180 <main+0x34>)
 8000168:	463c      	mov	r4, r7
 800016a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800016c:	c407      	stmia	r4!, {r0, r1, r2}
 800016e:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 1000);
 8000170:	4639      	mov	r1, r7
 8000172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000176:	220d      	movs	r2, #13
 8000178:	4802      	ldr	r0, [pc, #8]	; (8000184 <main+0x38>)
 800017a:	f001 fef4 	bl	8001f66 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800017e:	e7fe      	b.n	800017e <main+0x32>
 8000180:	080022ac 	.word	0x080022ac
 8000184:	20000028 	.word	0x20000028

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b094      	sub	sp, #80	; 0x50
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f002 f874 	bl	8002284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	f107 0314 	add.w	r3, r7, #20
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	605a      	str	r2, [r3, #4]
 80001a6:	609a      	str	r2, [r3, #8]
 80001a8:	60da      	str	r2, [r3, #12]
 80001aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80001b8:	2305      	movs	r3, #5
 80001ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c2:	2300      	movs	r3, #0
 80001c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80001c6:	2301      	movs	r3, #1
 80001c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ce:	2302      	movs	r3, #2
 80001d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 fd10 	bl	8000c08 <HAL_RCC_OscConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80001ee:	f000 f8f1 	bl	80003d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f2:	230f      	movs	r3, #15
 80001f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000202:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000208:	f107 0314 	add.w	r3, r7, #20
 800020c:	2102      	movs	r1, #2
 800020e:	4618      	mov	r0, r3
 8000210:	f000 ff7a 	bl	8001108 <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800021a:	f000 f8db 	bl	80003d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800021e:	2301      	movs	r3, #1
 8000220:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000226:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	4618      	mov	r0, r3
 800022c:	f001 f908 	bl	8001440 <HAL_RCCEx_PeriphCLKConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000236:	f000 f8cd 	bl	80003d4 <Error_Handler>
  }
}
 800023a:	bf00      	nop
 800023c:	3750      	adds	r7, #80	; 0x50
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2100      	movs	r1, #0
 800024e:	460a      	mov	r2, r1
 8000250:	801a      	strh	r2, [r3, #0]
 8000252:	460a      	mov	r2, r1
 8000254:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000256:	2300      	movs	r3, #0
 8000258:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800025a:	4b21      	ldr	r3, [pc, #132]	; (80002e0 <MX_RTC_Init+0x9c>)
 800025c:	4a21      	ldr	r2, [pc, #132]	; (80002e4 <MX_RTC_Init+0xa0>)
 800025e:	601a      	str	r2, [r3, #0]
  hrtc.Instance->CRH |= RTC_IT_SEC; // Enable interrupt every second
 8000260:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_RTC_Init+0x9c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	4b1e      	ldr	r3, [pc, #120]	; (80002e0 <MX_RTC_Init+0x9c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f042 0201 	orr.w	r2, r2, #1
 800026e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000270:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <MX_RTC_Init+0x9c>)
 8000272:	f04f 32ff 	mov.w	r2, #4294967295
 8000276:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000278:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <MX_RTC_Init+0x9c>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800027e:	4818      	ldr	r0, [pc, #96]	; (80002e0 <MX_RTC_Init+0x9c>)
 8000280:	f001 fa50 	bl	8001724 <HAL_RTC_Init>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <MX_RTC_Init+0x4a>
  {
    Error_Handler();
 800028a:	f000 f8a3 	bl	80003d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2200      	movs	r2, #0
 800029e:	4619      	mov	r1, r3
 80002a0:	480f      	ldr	r0, [pc, #60]	; (80002e0 <MX_RTC_Init+0x9c>)
 80002a2:	f001 fad5 	bl	8001850 <HAL_RTC_SetTime>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80002ac:	f000 f892 	bl	80003d4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80002b0:	2301      	movs	r3, #1
 80002b2:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80002b4:	2301      	movs	r3, #1
 80002b6:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 80002b8:	2301      	movs	r3, #1
 80002ba:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80002c0:	463b      	mov	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	4619      	mov	r1, r3
 80002c6:	4806      	ldr	r0, [pc, #24]	; (80002e0 <MX_RTC_Init+0x9c>)
 80002c8:	f001 fb5a 	bl	8001980 <HAL_RTC_SetDate>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80002d2:	f000 f87f 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000068 	.word	0x20000068
 80002e4:	40002800 	.word	0x40002800

080002e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <MX_USART1_UART_Init+0x50>)
 80002f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 80002f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 800030e:	220c      	movs	r2, #12
 8000310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_USART1_UART_Init+0x4c>)
 8000320:	f001 fdd4 	bl	8001ecc <HAL_UART_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800032a:	f000 f853 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000028 	.word	0x20000028
 8000338:	40013800 	.word	0x40013800

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000350:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <MX_GPIO_Init+0x90>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a1d      	ldr	r2, [pc, #116]	; (80003cc <MX_GPIO_Init+0x90>)
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <MX_GPIO_Init+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a17      	ldr	r2, [pc, #92]	; (80003cc <MX_GPIO_Init+0x90>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a11      	ldr	r2, [pc, #68]	; (80003cc <MX_GPIO_Init+0x90>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039e:	480c      	ldr	r0, [pc, #48]	; (80003d0 <MX_GPIO_Init+0x94>)
 80003a0:	f000 fbf4 	bl	8000b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	4619      	mov	r1, r3
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <MX_GPIO_Init+0x94>)
 80003be:	f000 fa8b 	bl	80008d8 <HAL_GPIO_Init>

}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40011000 	.word	0x40011000

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003da:	e7fe      	b.n	80003da <Error_Handler+0x6>

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a14      	ldr	r2, [pc, #80]	; (8000438 <HAL_MspInit+0x5c>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <HAL_MspInit+0x5c>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <HAL_MspInit+0x60>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <HAL_MspInit+0x60>)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000
 800043c:	40010000 	.word	0x40010000

08000440 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a0f      	ldr	r2, [pc, #60]	; (800048c <HAL_RTC_MspInit+0x4c>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d118      	bne.n	8000484 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000452:	f000 fbcd 	bl	8000bf0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <HAL_RTC_MspInit+0x50>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <HAL_RTC_MspInit+0x50>)
 800045c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <HAL_RTC_MspInit+0x50>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <HAL_RTC_MspInit+0x54>)
 8000470:	2201      	movs	r2, #1
 8000472:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	2100      	movs	r1, #0
 8000478:	2003      	movs	r0, #3
 800047a:	f000 f9f6 	bl	800086a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800047e:	2003      	movs	r0, #3
 8000480:	f000 fa0f 	bl	80008a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000484:	bf00      	nop
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40002800 	.word	0x40002800
 8000490:	40021000 	.word	0x40021000
 8000494:	4242043c 	.word	0x4242043c

08000498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a1c      	ldr	r2, [pc, #112]	; (8000524 <HAL_UART_MspInit+0x8c>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d131      	bne.n	800051c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a1a      	ldr	r2, [pc, #104]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a14      	ldr	r2, [pc, #80]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004d6:	f043 0304 	orr.w	r3, r3, #4
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_UART_MspInit+0x90>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0304 	and.w	r3, r3, #4
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ee:	2302      	movs	r3, #2
 80004f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f2:	2303      	movs	r3, #3
 80004f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	4619      	mov	r1, r3
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <HAL_UART_MspInit+0x94>)
 80004fe:	f000 f9eb 	bl	80008d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	4619      	mov	r1, r3
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <HAL_UART_MspInit+0x94>)
 8000518:	f000 f9de 	bl	80008d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800051c:	bf00      	nop
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40013800 	.word	0x40013800
 8000528:	40021000 	.word	0x40021000
 800052c:	40010800 	.word	0x40010800

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <NMI_Handler+0x4>

08000536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <MemManage_Handler+0x4>

08000542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <BusFault_Handler+0x4>

08000548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <UsageFault_Handler+0x4>

0800054e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr

08000566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000576:	f000 f885 	bl	8000684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <RTC_IRQHandler+0x18>)
 8000586:	f001 fc5b 	bl	8001e40 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */
  LED_TOGGLE();
 800058a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058e:	4803      	ldr	r0, [pc, #12]	; (800059c <RTC_IRQHandler+0x1c>)
 8000590:	f000 fb14 	bl	8000bbc <HAL_GPIO_TogglePin>
  /* USER CODE END RTC_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000068 	.word	0x20000068
 800059c:	40011000 	.word	0x40011000

080005a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ae:	e003      	b.n	80005b8 <LoopCopyDataInit>

080005b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005b6:	3104      	adds	r1, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005b8:	480a      	ldr	r0, [pc, #40]	; (80005e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005c0:	d3f6      	bcc.n	80005b0 <CopyDataInit>
  ldr r2, =_sbss
 80005c2:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005c4:	e002      	b.n	80005cc <LoopFillZerobss>

080005c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005c8:	f842 3b04 	str.w	r3, [r2], #4

080005cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005d0:	d3f9      	bcc.n	80005c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005d2:	f7ff ffe5 	bl	80005a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005d6:	f001 fe31 	bl	800223c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005da:	f7ff fdb7 	bl	800014c <main>
  bx lr
 80005de:	4770      	bx	lr
  ldr r3, =_sidata
 80005e0:	08002304 	.word	0x08002304
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80005ec:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80005f0:	20000080 	.word	0x20000080

080005f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC1_2_IRQHandler>
	...

080005f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_Init+0x28>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_Init+0x28>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000608:	2003      	movs	r0, #3
 800060a:	f000 f923 	bl	8000854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060e:	2000      	movs	r0, #0
 8000610:	f000 f808 	bl	8000624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000614:	f7ff fee2 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40022000 	.word	0x40022000

08000624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_InitTick+0x54>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_InitTick+0x58>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063a:	fbb3 f3f1 	udiv	r3, r3, r1
 800063e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f93b 	bl	80008be <HAL_SYSTICK_Config>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	e00e      	b.n	8000670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d80a      	bhi.n	800066e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000658:	2200      	movs	r2, #0
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	f04f 30ff 	mov.w	r0, #4294967295
 8000660:	f000 f903 	bl	800086a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <HAL_InitTick+0x5c>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	e000      	b.n	8000670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000000 	.word	0x20000000
 800067c:	20000008 	.word	0x20000008
 8000680:	20000004 	.word	0x20000004

08000684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_IncTick+0x1c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_IncTick+0x20>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a03      	ldr	r2, [pc, #12]	; (80006a4 <HAL_IncTick+0x20>)
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000008 	.word	0x20000008
 80006a4:	2000007c 	.word	0x2000007c

080006a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return uwTick;
 80006ac:	4b02      	ldr	r3, [pc, #8]	; (80006b8 <HAL_GetTick+0x10>)
 80006ae:	681b      	ldr	r3, [r3, #0]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	2000007c 	.word	0x2000007c

080006bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	60d3      	str	r3, [r2, #12]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <__NVIC_GetPriorityGrouping+0x18>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	f003 0307 	and.w	r3, r3, #7
}
 8000712:	4618      	mov	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	db0b      	blt.n	800074a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	f003 021f 	and.w	r2, r3, #31
 8000738:	4906      	ldr	r1, [pc, #24]	; (8000754 <__NVIC_EnableIRQ+0x34>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	2001      	movs	r0, #1
 8000742:	fa00 f202 	lsl.w	r2, r0, r2
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	; (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	; 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000820:	d301      	bcc.n	8000826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000822:	2301      	movs	r3, #1
 8000824:	e00f      	b.n	8000846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <SysTick_Config+0x40>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082e:	210f      	movs	r1, #15
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f7ff ff90 	bl	8000758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <SysTick_Config+0x40>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <SysTick_Config+0x40>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	e000e010 	.word	0xe000e010

08000854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff2d 	bl	80006bc <__NVIC_SetPriorityGrouping>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	4603      	mov	r3, r0
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800087c:	f7ff ff42 	bl	8000704 <__NVIC_GetPriorityGrouping>
 8000880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	68b9      	ldr	r1, [r7, #8]
 8000886:	6978      	ldr	r0, [r7, #20]
 8000888:	f7ff ff90 	bl	80007ac <NVIC_EncodePriority>
 800088c:	4602      	mov	r2, r0
 800088e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff5f 	bl	8000758 <__NVIC_SetPriority>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff35 	bl	8000720 <__NVIC_EnableIRQ>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ffa2 	bl	8000810 <SysTick_Config>
 80008cc:	4603      	mov	r3, r0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d8:	b480      	push	{r7}
 80008da:	b08b      	sub	sp, #44	; 0x2c
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ea:	e127      	b.n	8000b3c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008ec:	2201      	movs	r2, #1
 80008ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	69fa      	ldr	r2, [r7, #28]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	429a      	cmp	r2, r3
 8000906:	f040 8116 	bne.w	8000b36 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2b12      	cmp	r3, #18
 8000910:	d034      	beq.n	800097c <HAL_GPIO_Init+0xa4>
 8000912:	2b12      	cmp	r3, #18
 8000914:	d80d      	bhi.n	8000932 <HAL_GPIO_Init+0x5a>
 8000916:	2b02      	cmp	r3, #2
 8000918:	d02b      	beq.n	8000972 <HAL_GPIO_Init+0x9a>
 800091a:	2b02      	cmp	r3, #2
 800091c:	d804      	bhi.n	8000928 <HAL_GPIO_Init+0x50>
 800091e:	2b00      	cmp	r3, #0
 8000920:	d031      	beq.n	8000986 <HAL_GPIO_Init+0xae>
 8000922:	2b01      	cmp	r3, #1
 8000924:	d01c      	beq.n	8000960 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000926:	e048      	b.n	80009ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000928:	2b03      	cmp	r3, #3
 800092a:	d043      	beq.n	80009b4 <HAL_GPIO_Init+0xdc>
 800092c:	2b11      	cmp	r3, #17
 800092e:	d01b      	beq.n	8000968 <HAL_GPIO_Init+0x90>
          break;
 8000930:	e043      	b.n	80009ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000932:	4a89      	ldr	r2, [pc, #548]	; (8000b58 <HAL_GPIO_Init+0x280>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d026      	beq.n	8000986 <HAL_GPIO_Init+0xae>
 8000938:	4a87      	ldr	r2, [pc, #540]	; (8000b58 <HAL_GPIO_Init+0x280>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d806      	bhi.n	800094c <HAL_GPIO_Init+0x74>
 800093e:	4a87      	ldr	r2, [pc, #540]	; (8000b5c <HAL_GPIO_Init+0x284>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d020      	beq.n	8000986 <HAL_GPIO_Init+0xae>
 8000944:	4a86      	ldr	r2, [pc, #536]	; (8000b60 <HAL_GPIO_Init+0x288>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d01d      	beq.n	8000986 <HAL_GPIO_Init+0xae>
          break;
 800094a:	e036      	b.n	80009ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800094c:	4a85      	ldr	r2, [pc, #532]	; (8000b64 <HAL_GPIO_Init+0x28c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d019      	beq.n	8000986 <HAL_GPIO_Init+0xae>
 8000952:	4a85      	ldr	r2, [pc, #532]	; (8000b68 <HAL_GPIO_Init+0x290>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d016      	beq.n	8000986 <HAL_GPIO_Init+0xae>
 8000958:	4a84      	ldr	r2, [pc, #528]	; (8000b6c <HAL_GPIO_Init+0x294>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d013      	beq.n	8000986 <HAL_GPIO_Init+0xae>
          break;
 800095e:	e02c      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	623b      	str	r3, [r7, #32]
          break;
 8000966:	e028      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	3304      	adds	r3, #4
 800096e:	623b      	str	r3, [r7, #32]
          break;
 8000970:	e023      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	68db      	ldr	r3, [r3, #12]
 8000976:	3308      	adds	r3, #8
 8000978:	623b      	str	r3, [r7, #32]
          break;
 800097a:	e01e      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	330c      	adds	r3, #12
 8000982:	623b      	str	r3, [r7, #32]
          break;
 8000984:	e019      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d102      	bne.n	8000994 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800098e:	2304      	movs	r3, #4
 8000990:	623b      	str	r3, [r7, #32]
          break;
 8000992:	e012      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d105      	bne.n	80009a8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800099c:	2308      	movs	r3, #8
 800099e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	611a      	str	r2, [r3, #16]
          break;
 80009a6:	e008      	b.n	80009ba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a8:	2308      	movs	r3, #8
 80009aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	69fa      	ldr	r2, [r7, #28]
 80009b0:	615a      	str	r2, [r3, #20]
          break;
 80009b2:	e002      	b.n	80009ba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
          break;
 80009b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	2bff      	cmp	r3, #255	; 0xff
 80009be:	d801      	bhi.n	80009c4 <HAL_GPIO_Init+0xec>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	e001      	b.n	80009c8 <HAL_GPIO_Init+0xf0>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3304      	adds	r3, #4
 80009c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	2bff      	cmp	r3, #255	; 0xff
 80009ce:	d802      	bhi.n	80009d6 <HAL_GPIO_Init+0xfe>
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	e002      	b.n	80009dc <HAL_GPIO_Init+0x104>
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	3b08      	subs	r3, #8
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	210f      	movs	r1, #15
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	401a      	ands	r2, r3
 80009ee:	6a39      	ldr	r1, [r7, #32]
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	431a      	orrs	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f000 8096 	beq.w	8000b36 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a0a:	4b59      	ldr	r3, [pc, #356]	; (8000b70 <HAL_GPIO_Init+0x298>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a58      	ldr	r2, [pc, #352]	; (8000b70 <HAL_GPIO_Init+0x298>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b56      	ldr	r3, [pc, #344]	; (8000b70 <HAL_GPIO_Init+0x298>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a22:	4a54      	ldr	r2, [pc, #336]	; (8000b74 <HAL_GPIO_Init+0x29c>)
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	3302      	adds	r3, #2
 8000a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	f003 0303 	and.w	r3, r3, #3
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	220f      	movs	r2, #15
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	4013      	ands	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a4b      	ldr	r2, [pc, #300]	; (8000b78 <HAL_GPIO_Init+0x2a0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d013      	beq.n	8000a76 <HAL_GPIO_Init+0x19e>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a4a      	ldr	r2, [pc, #296]	; (8000b7c <HAL_GPIO_Init+0x2a4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d00d      	beq.n	8000a72 <HAL_GPIO_Init+0x19a>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a49      	ldr	r2, [pc, #292]	; (8000b80 <HAL_GPIO_Init+0x2a8>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d007      	beq.n	8000a6e <HAL_GPIO_Init+0x196>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a48      	ldr	r2, [pc, #288]	; (8000b84 <HAL_GPIO_Init+0x2ac>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d101      	bne.n	8000a6a <HAL_GPIO_Init+0x192>
 8000a66:	2303      	movs	r3, #3
 8000a68:	e006      	b.n	8000a78 <HAL_GPIO_Init+0x1a0>
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	e004      	b.n	8000a78 <HAL_GPIO_Init+0x1a0>
 8000a6e:	2302      	movs	r3, #2
 8000a70:	e002      	b.n	8000a78 <HAL_GPIO_Init+0x1a0>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <HAL_GPIO_Init+0x1a0>
 8000a76:	2300      	movs	r3, #0
 8000a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a7a:	f002 0203 	and.w	r2, r2, #3
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	4093      	lsls	r3, r2
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a88:	493a      	ldr	r1, [pc, #232]	; (8000b74 <HAL_GPIO_Init+0x29c>)
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	3302      	adds	r3, #2
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d006      	beq.n	8000ab0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aa2:	4b39      	ldr	r3, [pc, #228]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	4938      	ldr	r1, [pc, #224]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	600b      	str	r3, [r1, #0]
 8000aae:	e006      	b.n	8000abe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ab0:	4b35      	ldr	r3, [pc, #212]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	4933      	ldr	r1, [pc, #204]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000aba:	4013      	ands	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d006      	beq.n	8000ad8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aca:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	492e      	ldr	r1, [pc, #184]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	604b      	str	r3, [r1, #4]
 8000ad6:	e006      	b.n	8000ae6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	4929      	ldr	r1, [pc, #164]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d006      	beq.n	8000b00 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	4924      	ldr	r1, [pc, #144]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	608b      	str	r3, [r1, #8]
 8000afe:	e006      	b.n	8000b0e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	491f      	ldr	r1, [pc, #124]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d006      	beq.n	8000b28 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000b1c:	68da      	ldr	r2, [r3, #12]
 8000b1e:	491a      	ldr	r1, [pc, #104]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	60cb      	str	r3, [r1, #12]
 8000b26:	e006      	b.n	8000b36 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	4915      	ldr	r1, [pc, #84]	; (8000b88 <HAL_GPIO_Init+0x2b0>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	3301      	adds	r3, #1
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	fa22 f303 	lsr.w	r3, r2, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f47f aed0 	bne.w	80008ec <HAL_GPIO_Init+0x14>
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	372c      	adds	r7, #44	; 0x2c
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	10210000 	.word	0x10210000
 8000b5c:	10110000 	.word	0x10110000
 8000b60:	10120000 	.word	0x10120000
 8000b64:	10310000 	.word	0x10310000
 8000b68:	10320000 	.word	0x10320000
 8000b6c:	10220000 	.word	0x10220000
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010000 	.word	0x40010000
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	40010c00 	.word	0x40010c00
 8000b80:	40011000 	.word	0x40011000
 8000b84:	40011400 	.word	0x40011400
 8000b88:	40010400 	.word	0x40010400

08000b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b9c:	787b      	ldrb	r3, [r7, #1]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ba8:	e003      	b.n	8000bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	041a      	lsls	r2, r3, #16
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	611a      	str	r2, [r3, #16]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	041a      	lsls	r2, r3, #16
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	43d9      	mvns	r1, r3
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	400b      	ands	r3, r1
 8000bde:	431a      	orrs	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	611a      	str	r2, [r3, #16]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
	...

08000bf0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_PWR_EnableBkUpAccess+0x14>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	420e0020 	.word	0x420e0020

08000c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e26c      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8087 	beq.w	8000d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c28:	4b92      	ldr	r3, [pc, #584]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d00c      	beq.n	8000c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c34:	4b8f      	ldr	r3, [pc, #572]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 030c 	and.w	r3, r3, #12
 8000c3c:	2b08      	cmp	r3, #8
 8000c3e:	d112      	bne.n	8000c66 <HAL_RCC_OscConfig+0x5e>
 8000c40:	4b8c      	ldr	r3, [pc, #560]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c4c:	d10b      	bne.n	8000c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c4e:	4b89      	ldr	r3, [pc, #548]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d06c      	beq.n	8000d34 <HAL_RCC_OscConfig+0x12c>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d168      	bne.n	8000d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e246      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c6e:	d106      	bne.n	8000c7e <HAL_RCC_OscConfig+0x76>
 8000c70:	4b80      	ldr	r3, [pc, #512]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a7f      	ldr	r2, [pc, #508]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	e02e      	b.n	8000cdc <HAL_RCC_OscConfig+0xd4>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10c      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x98>
 8000c86:	4b7b      	ldr	r3, [pc, #492]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a7a      	ldr	r2, [pc, #488]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	4b78      	ldr	r3, [pc, #480]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a77      	ldr	r2, [pc, #476]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e01d      	b.n	8000cdc <HAL_RCC_OscConfig+0xd4>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ca8:	d10c      	bne.n	8000cc4 <HAL_RCC_OscConfig+0xbc>
 8000caa:	4b72      	ldr	r3, [pc, #456]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a71      	ldr	r2, [pc, #452]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	4b6f      	ldr	r3, [pc, #444]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a6e      	ldr	r2, [pc, #440]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e00b      	b.n	8000cdc <HAL_RCC_OscConfig+0xd4>
 8000cc4:	4b6b      	ldr	r3, [pc, #428]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a6a      	ldr	r2, [pc, #424]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4b68      	ldr	r3, [pc, #416]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a67      	ldr	r2, [pc, #412]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d013      	beq.n	8000d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce4:	f7ff fce0 	bl	80006a8 <HAL_GetTick>
 8000ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cea:	e008      	b.n	8000cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cec:	f7ff fcdc 	bl	80006a8 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b64      	cmp	r3, #100	; 0x64
 8000cf8:	d901      	bls.n	8000cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e1fa      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfe:	4b5d      	ldr	r3, [pc, #372]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f0      	beq.n	8000cec <HAL_RCC_OscConfig+0xe4>
 8000d0a:	e014      	b.n	8000d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fccc 	bl	80006a8 <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d14:	f7ff fcc8 	bl	80006a8 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b64      	cmp	r3, #100	; 0x64
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e1e6      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d26:	4b53      	ldr	r3, [pc, #332]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f0      	bne.n	8000d14 <HAL_RCC_OscConfig+0x10c>
 8000d32:	e000      	b.n	8000d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d063      	beq.n	8000e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d42:	4b4c      	ldr	r3, [pc, #304]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00b      	beq.n	8000d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d4e:	4b49      	ldr	r3, [pc, #292]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b08      	cmp	r3, #8
 8000d58:	d11c      	bne.n	8000d94 <HAL_RCC_OscConfig+0x18c>
 8000d5a:	4b46      	ldr	r3, [pc, #280]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d116      	bne.n	8000d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d66:	4b43      	ldr	r3, [pc, #268]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d005      	beq.n	8000d7e <HAL_RCC_OscConfig+0x176>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d001      	beq.n	8000d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e1ba      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	4939      	ldr	r1, [pc, #228]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d92:	e03a      	b.n	8000e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d020      	beq.n	8000dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d9c:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <HAL_RCC_OscConfig+0x270>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da2:	f7ff fc81 	bl	80006a8 <HAL_GetTick>
 8000da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da8:	e008      	b.n	8000dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000daa:	f7ff fc7d 	bl	80006a8 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e19b      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0f0      	beq.n	8000daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc8:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4927      	ldr	r1, [pc, #156]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	600b      	str	r3, [r1, #0]
 8000ddc:	e015      	b.n	8000e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <HAL_RCC_OscConfig+0x270>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff fc60 	bl	80006a8 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dec:	f7ff fc5c 	bl	80006a8 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e17a      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f0      	bne.n	8000dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d03a      	beq.n	8000e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d019      	beq.n	8000e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_RCC_OscConfig+0x274>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e24:	f7ff fc40 	bl	80006a8 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e2c:	f7ff fc3c 	bl	80006a8 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e15a      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f0      	beq.n	8000e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f000 fada 	bl	8001404 <RCC_Delay>
 8000e50:	e01c      	b.n	8000e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_RCC_OscConfig+0x274>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e58:	f7ff fc26 	bl	80006a8 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e5e:	e00f      	b.n	8000e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e60:	f7ff fc22 	bl	80006a8 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d908      	bls.n	8000e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e140      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000
 8000e78:	42420000 	.word	0x42420000
 8000e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e80:	4b9e      	ldr	r3, [pc, #632]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1e9      	bne.n	8000e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 80a6 	beq.w	8000fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9e:	4b97      	ldr	r3, [pc, #604]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10d      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b94      	ldr	r3, [pc, #592]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	4a93      	ldr	r2, [pc, #588]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	61d3      	str	r3, [r2, #28]
 8000eb6:	4b91      	ldr	r3, [pc, #580]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec6:	4b8e      	ldr	r3, [pc, #568]	; (8001100 <HAL_RCC_OscConfig+0x4f8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d118      	bne.n	8000f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ed2:	4b8b      	ldr	r3, [pc, #556]	; (8001100 <HAL_RCC_OscConfig+0x4f8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a8a      	ldr	r2, [pc, #552]	; (8001100 <HAL_RCC_OscConfig+0x4f8>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ede:	f7ff fbe3 	bl	80006a8 <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee6:	f7ff fbdf 	bl	80006a8 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b64      	cmp	r3, #100	; 0x64
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e0fd      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef8:	4b81      	ldr	r3, [pc, #516]	; (8001100 <HAL_RCC_OscConfig+0x4f8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f0      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d106      	bne.n	8000f1a <HAL_RCC_OscConfig+0x312>
 8000f0c:	4b7b      	ldr	r3, [pc, #492]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4a7a      	ldr	r2, [pc, #488]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6213      	str	r3, [r2, #32]
 8000f18:	e02d      	b.n	8000f76 <HAL_RCC_OscConfig+0x36e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0x334>
 8000f22:	4b76      	ldr	r3, [pc, #472]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4a75      	ldr	r2, [pc, #468]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	6213      	str	r3, [r2, #32]
 8000f2e:	4b73      	ldr	r3, [pc, #460]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	4a72      	ldr	r2, [pc, #456]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f34:	f023 0304 	bic.w	r3, r3, #4
 8000f38:	6213      	str	r3, [r2, #32]
 8000f3a:	e01c      	b.n	8000f76 <HAL_RCC_OscConfig+0x36e>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b05      	cmp	r3, #5
 8000f42:	d10c      	bne.n	8000f5e <HAL_RCC_OscConfig+0x356>
 8000f44:	4b6d      	ldr	r3, [pc, #436]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	4a6c      	ldr	r2, [pc, #432]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6213      	str	r3, [r2, #32]
 8000f50:	4b6a      	ldr	r3, [pc, #424]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	4a69      	ldr	r2, [pc, #420]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6213      	str	r3, [r2, #32]
 8000f5c:	e00b      	b.n	8000f76 <HAL_RCC_OscConfig+0x36e>
 8000f5e:	4b67      	ldr	r3, [pc, #412]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4a66      	ldr	r2, [pc, #408]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	6213      	str	r3, [r2, #32]
 8000f6a:	4b64      	ldr	r3, [pc, #400]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	4a63      	ldr	r2, [pc, #396]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	f023 0304 	bic.w	r3, r3, #4
 8000f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d015      	beq.n	8000faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7e:	f7ff fb93 	bl	80006a8 <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f84:	e00a      	b.n	8000f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f86:	f7ff fb8f 	bl	80006a8 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e0ab      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f9c:	4b57      	ldr	r3, [pc, #348]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0ee      	beq.n	8000f86 <HAL_RCC_OscConfig+0x37e>
 8000fa8:	e014      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fb7d 	bl	80006a8 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb0:	e00a      	b.n	8000fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb2:	f7ff fb79 	bl	80006a8 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e095      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc8:	4b4c      	ldr	r3, [pc, #304]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1ee      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d105      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fda:	4b48      	ldr	r3, [pc, #288]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a47      	ldr	r2, [pc, #284]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 8081 	beq.w	80010f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ff0:	4b42      	ldr	r3, [pc, #264]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 030c 	and.w	r3, r3, #12
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d061      	beq.n	80010c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d146      	bne.n	8001092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001004:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <HAL_RCC_OscConfig+0x4fc>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fb4d 	bl	80006a8 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001012:	f7ff fb49 	bl	80006a8 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e067      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001024:	4b35      	ldr	r3, [pc, #212]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f0      	bne.n	8001012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001038:	d108      	bne.n	800104c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800103a:	4b30      	ldr	r3, [pc, #192]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	492d      	ldr	r1, [pc, #180]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8001048:	4313      	orrs	r3, r2
 800104a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800104c:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a19      	ldr	r1, [r3, #32]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	430b      	orrs	r3, r1
 800105e:	4927      	ldr	r1, [pc, #156]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8001060:	4313      	orrs	r3, r2
 8001062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <HAL_RCC_OscConfig+0x4fc>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106a:	f7ff fb1d 	bl	80006a8 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001072:	f7ff fb19 	bl	80006a8 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e037      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x46a>
 8001090:	e02f      	b.n	80010f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <HAL_RCC_OscConfig+0x4fc>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff fb06 	bl	80006a8 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a0:	f7ff fb02 	bl	80006a8 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e020      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x498>
 80010be:	e018      	b.n	80010f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e013      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_RCC_OscConfig+0x4f4>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d106      	bne.n	80010ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d001      	beq.n	80010f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000
 8001100:	40007000 	.word	0x40007000
 8001104:	42420060 	.word	0x42420060

08001108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0d0      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800111c:	4b6a      	ldr	r3, [pc, #424]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d910      	bls.n	800114c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112a:	4b67      	ldr	r3, [pc, #412]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 0207 	bic.w	r2, r3, #7
 8001132:	4965      	ldr	r1, [pc, #404]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800113a:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0b8      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d020      	beq.n	800119a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001164:	4b59      	ldr	r3, [pc, #356]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a58      	ldr	r2, [pc, #352]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800116e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4a52      	ldr	r2, [pc, #328]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001182:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001186:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001188:	4b50      	ldr	r3, [pc, #320]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	494d      	ldr	r1, [pc, #308]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	4313      	orrs	r3, r2
 8001198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d040      	beq.n	8001228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d107      	bne.n	80011be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	4b47      	ldr	r3, [pc, #284]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d115      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e07f      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d107      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c6:	4b41      	ldr	r3, [pc, #260]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d109      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e073      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e06b      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011e6:	4b39      	ldr	r3, [pc, #228]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f023 0203 	bic.w	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	4936      	ldr	r1, [pc, #216]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f8:	f7ff fa56 	bl	80006a8 <HAL_GetTick>
 80011fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fe:	e00a      	b.n	8001216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001200:	f7ff fa52 	bl	80006a8 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f241 3288 	movw	r2, #5000	; 0x1388
 800120e:	4293      	cmp	r3, r2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e053      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 020c 	and.w	r2, r3, #12
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	429a      	cmp	r2, r3
 8001226:	d1eb      	bne.n	8001200 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001228:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d210      	bcs.n	8001258 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 0207 	bic.w	r2, r3, #7
 800123e:	4922      	ldr	r1, [pc, #136]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d001      	beq.n	8001258 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e032      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d008      	beq.n	8001276 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4916      	ldr	r1, [pc, #88]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	4313      	orrs	r3, r2
 8001274:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d009      	beq.n	8001296 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	490e      	ldr	r1, [pc, #56]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001296:	f000 f821 	bl	80012dc <HAL_RCC_GetSysClockFreq>
 800129a:	4601      	mov	r1, r0
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_RCC_ClockConfig+0x1c8>)
 80012a8:	5cd3      	ldrb	r3, [r2, r3]
 80012aa:	fa21 f303 	lsr.w	r3, r1, r3
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <HAL_RCC_ClockConfig+0x1cc>)
 80012b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_RCC_ClockConfig+0x1d0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f9b4 	bl	8000624 <HAL_InitTick>

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40022000 	.word	0x40022000
 80012cc:	40021000 	.word	0x40021000
 80012d0:	080022e4 	.word	0x080022e4
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000004 	.word	0x20000004

080012dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012dc:	b490      	push	{r4, r7}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <HAL_RCC_GetSysClockFreq+0xb0>)
 80012e4:	1d3c      	adds	r4, r7, #4
 80012e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b04      	cmp	r3, #4
 8001314:	d002      	beq.n	800131c <HAL_RCC_GetSysClockFreq+0x40>
 8001316:	2b08      	cmp	r3, #8
 8001318:	d003      	beq.n	8001322 <HAL_RCC_GetSysClockFreq+0x46>
 800131a:	e02d      	b.n	8001378 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800131e:	623b      	str	r3, [r7, #32]
      break;
 8001320:	e02d      	b.n	800137e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	0c9b      	lsrs	r3, r3, #18
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800132e:	4413      	add	r3, r2
 8001330:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001334:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	0c5b      	lsrs	r3, r3, #17
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800134e:	4413      	add	r3, r2
 8001350:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001354:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800135a:	fb02 f203 	mul.w	r2, r2, r3
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	fbb2 f3f3 	udiv	r3, r2, r3
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
 8001366:	e004      	b.n	8001372 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	4a0c      	ldr	r2, [pc, #48]	; (800139c <HAL_RCC_GetSysClockFreq+0xc0>)
 800136c:	fb02 f303 	mul.w	r3, r2, r3
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	623b      	str	r3, [r7, #32]
      break;
 8001376:	e002      	b.n	800137e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800137a:	623b      	str	r3, [r7, #32]
      break;
 800137c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800137e:	6a3b      	ldr	r3, [r7, #32]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bc90      	pop	{r4, r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	080022bc 	.word	0x080022bc
 8001390:	080022cc 	.word	0x080022cc
 8001394:	40021000 	.word	0x40021000
 8001398:	007a1200 	.word	0x007a1200
 800139c:	003d0900 	.word	0x003d0900

080013a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000000 	.word	0x20000000

080013b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013b8:	f7ff fff2 	bl	80013a0 <HAL_RCC_GetHCLKFreq>
 80013bc:	4601      	mov	r1, r0
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000
 80013d8:	080022f4 	.word	0x080022f4

080013dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013e0:	f7ff ffde 	bl	80013a0 <HAL_RCC_GetHCLKFreq>
 80013e4:	4601      	mov	r1, r0
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	0adb      	lsrs	r3, r3, #11
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013f2:	5cd3      	ldrb	r3, [r2, r3]
 80013f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40021000 	.word	0x40021000
 8001400:	080022f4 	.word	0x080022f4

08001404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <RCC_Delay+0x34>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0a      	ldr	r2, [pc, #40]	; (800143c <RCC_Delay+0x38>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0a5b      	lsrs	r3, r3, #9
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001420:	bf00      	nop
  }
  while (Delay --);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1e5a      	subs	r2, r3, #1
 8001426:	60fa      	str	r2, [r7, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f9      	bne.n	8001420 <RCC_Delay+0x1c>
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000000 	.word	0x20000000
 800143c:	10624dd3 	.word	0x10624dd3

08001440 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d07d      	beq.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001460:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10d      	bne.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	4a4b      	ldr	r2, [pc, #300]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001476:	61d3      	str	r3, [r2, #28]
 8001478:	4b49      	ldr	r3, [pc, #292]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001484:	2301      	movs	r3, #1
 8001486:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001488:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001490:	2b00      	cmp	r3, #0
 8001492:	d118      	bne.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001494:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a42      	ldr	r2, [pc, #264]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800149a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a0:	f7ff f902 	bl	80006a8 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a6:	e008      	b.n	80014ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a8:	f7ff f8fe 	bl	80006a8 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	; 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e06d      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ba:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d02e      	beq.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d027      	beq.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014ee:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80014fa:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d014      	beq.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff f8cd 	bl	80006a8 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	e00a      	b.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff f8c9 	bl	80006a8 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001520:	4293      	cmp	r3, r2
 8001522:	d901      	bls.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e036      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0ee      	beq.n	8001512 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4917      	ldr	r1, [pc, #92]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001542:	4313      	orrs	r3, r2
 8001544:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d105      	bne.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001556:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	490b      	ldr	r1, [pc, #44]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001572:	4313      	orrs	r3, r2
 8001574:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	4904      	ldr	r1, [pc, #16]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40007000 	.word	0x40007000
 80015a8:	42420440 	.word	0x42420440

080015ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b08d      	sub	sp, #52	; 0x34
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015b4:	4b55      	ldr	r3, [pc, #340]	; (800170c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80015b6:	f107 040c 	add.w	r4, r7, #12
 80015ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d07f      	beq.n	80016e0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80015e0:	2b10      	cmp	r3, #16
 80015e2:	d002      	beq.n	80015ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d048      	beq.n	800167a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80015e8:	e08b      	b.n	8001702 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80015ea:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80015f0:	4b48      	ldr	r3, [pc, #288]	; (8001714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d07f      	beq.n	80016fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	0c9b      	lsrs	r3, r3, #18
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001608:	4413      	add	r3, r2
 800160a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800160e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d018      	beq.n	800164c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800161a:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	0c5b      	lsrs	r3, r3, #17
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001628:	4413      	add	r3, r2
 800162a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00d      	beq.n	8001656 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800163a:	4a37      	ldr	r2, [pc, #220]	; (8001718 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	fb02 f303 	mul.w	r3, r2, r3
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800164a:	e004      	b.n	8001656 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	4a33      	ldr	r2, [pc, #204]	; (800171c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001662:	d102      	bne.n	800166a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8001664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001668:	e048      	b.n	80016fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800166a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4a2c      	ldr	r2, [pc, #176]	; (8001720 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	085b      	lsrs	r3, r3, #1
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001678:	e040      	b.n	80016fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800168a:	d108      	bne.n	800169e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8001696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
 800169c:	e01f      	b.n	80016de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a8:	d109      	bne.n	80016be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80016b6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80016bc:	e00f      	b.n	80016de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016c8:	d11a      	bne.n	8001700 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d014      	beq.n	8001700 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80016d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80016dc:	e010      	b.n	8001700 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80016de:	e00f      	b.n	8001700 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80016e0:	f7ff fe7c 	bl	80013dc <HAL_RCC_GetPCLK2Freq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	0b9b      	lsrs	r3, r3, #14
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	3301      	adds	r3, #1
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80016fa:	e002      	b.n	8001702 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80016fc:	bf00      	nop
 80016fe:	e000      	b.n	8001702 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001700:	bf00      	nop
    }
  }
  return (frequency);
 8001702:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001704:	4618      	mov	r0, r3
 8001706:	3734      	adds	r7, #52	; 0x34
 8001708:	46bd      	mov	sp, r7
 800170a:	bd90      	pop	{r4, r7, pc}
 800170c:	080022d0 	.word	0x080022d0
 8001710:	080022e0 	.word	0x080022e0
 8001714:	40021000 	.word	0x40021000
 8001718:	007a1200 	.word	0x007a1200
 800171c:	003d0900 	.word	0x003d0900
 8001720:	aaaaaaab 	.word	0xaaaaaaab

08001724 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e084      	b.n	8001844 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7c5b      	ldrb	r3, [r3, #17]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe fe78 	bl	8000440 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f9c8 	bl	8001aec <HAL_RTC_WaitForSynchro>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d004      	beq.n	800176c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2204      	movs	r2, #4
 8001766:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e06b      	b.n	8001844 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 fa81 	bl	8001c74 <RTC_EnterInitMode>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2204      	movs	r2, #4
 800177c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e060      	b.n	8001844 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0207 	bic.w	r2, r2, #7
 8001790:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800179a:	4b2c      	ldr	r3, [pc, #176]	; (800184c <HAL_RTC_Init+0x128>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a2b      	ldr	r2, [pc, #172]	; (800184c <HAL_RTC_Init+0x128>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80017a6:	4b29      	ldr	r3, [pc, #164]	; (800184c <HAL_RTC_Init+0x128>)
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	4926      	ldr	r1, [pc, #152]	; (800184c <HAL_RTC_Init+0x128>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d003      	beq.n	80017ca <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	e00e      	b.n	80017e8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff feee 	bl	80015ac <HAL_RCCEx_GetPeriphCLKFreq>
 80017d0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d104      	bne.n	80017e2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2204      	movs	r2, #4
 80017dc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e030      	b.n	8001844 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f023 010f 	bic.w	r1, r3, #15
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	0c1a      	lsrs	r2, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	041b      	lsls	r3, r3, #16
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	b291      	uxth	r1, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	430b      	orrs	r3, r1
 8001812:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fa55 	bl	8001cc4 <RTC_ExitInitMode>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2204      	movs	r2, #4
 8001824:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e00c      	b.n	8001844 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001842:	2300      	movs	r3, #0
  }
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40006c00 	.word	0x40006c00

08001850 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <HAL_RTC_SetTime+0x20>
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e080      	b.n	8001976 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	7c1b      	ldrb	r3, [r3, #16]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_RTC_SetTime+0x30>
 800187c:	2302      	movs	r3, #2
 800187e:	e07a      	b.n	8001976 <HAL_RTC_SetTime+0x126>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2201      	movs	r2, #1
 8001884:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2202      	movs	r2, #2
 800188a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d113      	bne.n	80018ba <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800189c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	785b      	ldrb	r3, [r3, #1]
 80018a4:	4619      	mov	r1, r3
 80018a6:	460b      	mov	r3, r1
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	1a5b      	subs	r3, r3, r1
 80018ac:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80018ae:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80018b4:	4413      	add	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e01e      	b.n	80018f8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fa28 	bl	8001d14 <RTC_Bcd2ToByte>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80018cc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fa1d 	bl	8001d14 <RTC_Bcd2ToByte>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	4613      	mov	r3, r2
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80018e6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	789b      	ldrb	r3, [r3, #2]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 fa11 	bl	8001d14 <RTC_Bcd2ToByte>
 80018f2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80018f4:	4423      	add	r3, r4
 80018f6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80018f8:	6979      	ldr	r1, [r7, #20]
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 f953 	bl	8001ba6 <RTC_WriteTimeCounter>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d007      	beq.n	8001916 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2204      	movs	r2, #4
 800190a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e02f      	b.n	8001976 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0205 	bic.w	r2, r2, #5
 8001924:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f964 	bl	8001bf4 <RTC_ReadAlarmCounter>
 800192c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d018      	beq.n	8001968 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	429a      	cmp	r2, r3
 800193c:	d214      	bcs.n	8001968 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001944:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001948:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800194a:	6939      	ldr	r1, [r7, #16]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 f96a 	bl	8001c26 <RTC_WriteAlarmCounter>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d007      	beq.n	8001968 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2204      	movs	r2, #4
 800195c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e006      	b.n	8001976 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001974:	2300      	movs	r3, #0
  }
}
 8001976:	4618      	mov	r0, r3
 8001978:	371c      	adds	r7, #28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd90      	pop	{r4, r7, pc}
	...

08001980 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_RTC_SetDate+0x24>
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e097      	b.n	8001ad8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	7c1b      	ldrb	r3, [r3, #16]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_RTC_SetDate+0x34>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e091      	b.n	8001ad8 <HAL_RTC_SetDate+0x158>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2201      	movs	r2, #1
 80019b8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2202      	movs	r2, #2
 80019be:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10c      	bne.n	80019e0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	78da      	ldrb	r2, [r3, #3]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	785a      	ldrb	r2, [r3, #1]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	789a      	ldrb	r2, [r3, #2]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	739a      	strb	r2, [r3, #14]
 80019de:	e01a      	b.n	8001a16 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	78db      	ldrb	r3, [r3, #3]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f995 	bl	8001d14 <RTC_Bcd2ToByte>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	785b      	ldrb	r3, [r3, #1]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f98c 	bl	8001d14 <RTC_Bcd2ToByte>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	789b      	ldrb	r3, [r3, #2]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f983 	bl	8001d14 <RTC_Bcd2ToByte>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	7bdb      	ldrb	r3, [r3, #15]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	7b59      	ldrb	r1, [r3, #13]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	7b9b      	ldrb	r3, [r3, #14]
 8001a24:	461a      	mov	r2, r3
 8001a26:	f000 f993 	bl	8001d50 <RTC_WeekDayNum>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	7b1a      	ldrb	r2, [r3, #12]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f883 	bl	8001b46 <RTC_ReadTimeCounter>
 8001a40:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	4a26      	ldr	r2, [pc, #152]	; (8001ae0 <HAL_RTC_SetDate+0x160>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0adb      	lsrs	r3, r3, #11
 8001a4c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b18      	cmp	r3, #24
 8001a52:	d93a      	bls.n	8001aca <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <HAL_RTC_SetDate+0x164>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	4a22      	ldr	r2, [pc, #136]	; (8001ae8 <HAL_RTC_SetDate+0x168>)
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001a6a:	69f9      	ldr	r1, [r7, #28]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f89a 	bl	8001ba6 <RTC_WriteTimeCounter>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d007      	beq.n	8001a88 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e027      	b.n	8001ad8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 f8b3 	bl	8001bf4 <RTC_ReadAlarmCounter>
 8001a8e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a96:	d018      	beq.n	8001aca <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d214      	bcs.n	8001aca <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001aa6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001aaa:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001aac:	69b9      	ldr	r1, [r7, #24]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f8b9 	bl	8001c26 <RTC_WriteAlarmCounter>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2204      	movs	r2, #4
 8001abe:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e006      	b.n	8001ad8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2201      	movs	r2, #1
 8001ace:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	91a2b3c5 	.word	0x91a2b3c5
 8001ae4:	aaaaaaab 	.word	0xaaaaaaab
 8001ae8:	00015180 	.word	0x00015180

08001aec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e01d      	b.n	8001b3e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0208 	bic.w	r2, r2, #8
 8001b10:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001b12:	f7fe fdc9 	bl	80006a8 <HAL_GetTick>
 8001b16:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001b18:	e009      	b.n	8001b2e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001b1a:	f7fe fdc5 	bl	80006a8 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b28:	d901      	bls.n	8001b2e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e007      	b.n	8001b3e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0ee      	beq.n	8001b1a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b087      	sub	sp, #28
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	827b      	strh	r3, [r7, #18]
 8001b52:	2300      	movs	r3, #0
 8001b54:	823b      	strh	r3, [r7, #16]
 8001b56:	2300      	movs	r3, #0
 8001b58:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001b76:	8a7a      	ldrh	r2, [r7, #18]
 8001b78:	8a3b      	ldrh	r3, [r7, #16]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d008      	beq.n	8001b90 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001b7e:	8a3b      	ldrh	r3, [r7, #16]
 8001b80:	041a      	lsls	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	e004      	b.n	8001b9a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001b90:	8a7b      	ldrh	r3, [r7, #18]
 8001b92:	041a      	lsls	r2, r3, #16
 8001b94:	89fb      	ldrh	r3, [r7, #14]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001b9a:	697b      	ldr	r3, [r7, #20]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f85d 	bl	8001c74 <RTC_EnterInitMode>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e011      	b.n	8001bea <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	0c12      	lsrs	r2, r2, #16
 8001bce:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	b292      	uxth	r2, r2
 8001bd8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f872 	bl	8001cc4 <RTC_ExitInitMode>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	81fb      	strh	r3, [r7, #14]
 8001c00:	2300      	movs	r3, #0
 8001c02:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001c14:	89fb      	ldrh	r3, [r7, #14]
 8001c16:	041a      	lsls	r2, r3, #16
 8001c18:	89bb      	ldrh	r3, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f81d 	bl	8001c74 <RTC_EnterInitMode>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e011      	b.n	8001c6a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	0c12      	lsrs	r2, r2, #16
 8001c4e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	b292      	uxth	r2, r2
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f832 	bl	8001cc4 <RTC_ExitInitMode>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001c80:	f7fe fd12 	bl	80006a8 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001c86:	e009      	b.n	8001c9c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001c88:	f7fe fd0e 	bl	80006a8 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c96:	d901      	bls.n	8001c9c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e00f      	b.n	8001cbc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0ee      	beq.n	8001c88 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0210 	orr.w	r2, r2, #16
 8001cb8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0210 	bic.w	r2, r2, #16
 8001cde:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001ce0:	f7fe fce2 	bl	80006a8 <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001ce6:	e009      	b.n	8001cfc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001ce8:	f7fe fcde 	bl	80006a8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cf6:	d901      	bls.n	8001cfc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e007      	b.n	8001d0c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0ee      	beq.n	8001ce8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	b2db      	uxtb	r3, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
	...

08001d50 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	70fb      	strb	r3, [r7, #3]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001d6e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d82d      	bhi.n	8001dd2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001d76:	78fa      	ldrb	r2, [r7, #3]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	4a2c      	ldr	r2, [pc, #176]	; (8001e34 <RTC_WeekDayNum+0xe4>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	085a      	lsrs	r2, r3, #1
 8001d8a:	78bb      	ldrb	r3, [r7, #2]
 8001d8c:	441a      	add	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	441a      	add	r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	441a      	add	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	4926      	ldr	r1, [pc, #152]	; (8001e38 <RTC_WeekDayNum+0xe8>)
 8001da0:	fba1 1303 	umull	r1, r3, r1, r3
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	1ad2      	subs	r2, r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	4922      	ldr	r1, [pc, #136]	; (8001e38 <RTC_WeekDayNum+0xe8>)
 8001dae:	fba1 1303 	umull	r1, r3, r1, r3
 8001db2:	09db      	lsrs	r3, r3, #7
 8001db4:	4413      	add	r3, r2
 8001db6:	1d1a      	adds	r2, r3, #4
 8001db8:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <RTC_WeekDayNum+0xec>)
 8001dba:	fba3 1302 	umull	r1, r3, r3, r2
 8001dbe:	1ad1      	subs	r1, r2, r3
 8001dc0:	0849      	lsrs	r1, r1, #1
 8001dc2:	440b      	add	r3, r1
 8001dc4:	0899      	lsrs	r1, r3, #2
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	1a5b      	subs	r3, r3, r1
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e029      	b.n	8001e26 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001dd2:	78fa      	ldrb	r2, [r7, #3]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <RTC_WeekDayNum+0xe4>)
 8001de0:	fba2 2303 	umull	r2, r3, r2, r3
 8001de4:	085a      	lsrs	r2, r3, #1
 8001de6:	78bb      	ldrb	r3, [r7, #2]
 8001de8:	441a      	add	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	441a      	add	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	441a      	add	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4910      	ldr	r1, [pc, #64]	; (8001e38 <RTC_WeekDayNum+0xe8>)
 8001df8:	fba1 1303 	umull	r1, r3, r1, r3
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	1ad2      	subs	r2, r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	490d      	ldr	r1, [pc, #52]	; (8001e38 <RTC_WeekDayNum+0xe8>)
 8001e04:	fba1 1303 	umull	r1, r3, r1, r3
 8001e08:	09db      	lsrs	r3, r3, #7
 8001e0a:	4413      	add	r3, r2
 8001e0c:	1c9a      	adds	r2, r3, #2
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <RTC_WeekDayNum+0xec>)
 8001e10:	fba3 1302 	umull	r1, r3, r3, r2
 8001e14:	1ad1      	subs	r1, r2, r3
 8001e16:	0849      	lsrs	r1, r1, #1
 8001e18:	440b      	add	r3, r1
 8001e1a:	0899      	lsrs	r1, r3, #2
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	1a5b      	subs	r3, r3, r1
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	b2db      	uxtb	r3, r3
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	38e38e39 	.word	0x38e38e39
 8001e38:	51eb851f 	.word	0x51eb851f
 8001e3c:	24924925 	.word	0x24924925

08001e40 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d024      	beq.n	8001ea0 <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01d      	beq.n	8001ea0 <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f821 	bl	8001eba <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0204 	mvn.w	r2, #4
 8001e80:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2204      	movs	r2, #4
 8001e86:	745a      	strb	r2, [r3, #17]
 8001e88:	e005      	b.n	8001e96 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f80c 	bl	8001ea8 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f06f 0201 	mvn.w	r2, #1
 8001e9e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e03f      	b.n	8001f5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fad0 	bl	8000498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2224      	movs	r2, #36	; 0x24
 8001efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f905 	bl	8002120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b08a      	sub	sp, #40	; 0x28
 8001f6a:	af02      	add	r7, sp, #8
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	4613      	mov	r3, r2
 8001f74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	d17c      	bne.n	8002080 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <HAL_UART_Transmit+0x2c>
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e075      	b.n	8002082 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_UART_Transmit+0x3e>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e06e      	b.n	8002082 <HAL_UART_Transmit+0x11c>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2221      	movs	r2, #33	; 0x21
 8001fb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fba:	f7fe fb75 	bl	80006a8 <HAL_GetTick>
 8001fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	88fa      	ldrh	r2, [r7, #6]
 8001fc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	88fa      	ldrh	r2, [r7, #6]
 8001fca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd4:	d108      	bne.n	8001fe8 <HAL_UART_Transmit+0x82>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d104      	bne.n	8001fe8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	e003      	b.n	8001ff0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001ff8:	e02a      	b.n	8002050 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2200      	movs	r2, #0
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f840 	bl	800208a <UART_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e036      	b.n	8002082 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10b      	bne.n	8002032 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	3302      	adds	r3, #2
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	e007      	b.n	8002042 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	3301      	adds	r3, #1
 8002040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1cf      	bne.n	8001ffa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2200      	movs	r2, #0
 8002062:	2140      	movs	r1, #64	; 0x40
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f810 	bl	800208a <UART_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e006      	b.n	8002082 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	4613      	mov	r3, r2
 8002098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800209a:	e02c      	b.n	80020f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a2:	d028      	beq.n	80020f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <UART_WaitOnFlagUntilTimeout+0x30>
 80020aa:	f7fe fafd 	bl	80006a8 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d21d      	bcs.n	80020f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0201 	bic.w	r2, r2, #1
 80020d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e00f      	b.n	8002116 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4013      	ands	r3, r2
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	429a      	cmp	r2, r3
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	429a      	cmp	r2, r3
 8002112:	d0c3      	beq.n	800209c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800215a:	f023 030c 	bic.w	r3, r3, #12
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	430b      	orrs	r3, r1
 8002166:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a2c      	ldr	r2, [pc, #176]	; (8002234 <UART_SetConfig+0x114>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d103      	bne.n	8002190 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002188:	f7ff f928 	bl	80013dc <HAL_RCC_GetPCLK2Freq>
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	e002      	b.n	8002196 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002190:	f7ff f910 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
 8002194:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	009a      	lsls	r2, r3, #2
 80021a0:	441a      	add	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ac:	4a22      	ldr	r2, [pc, #136]	; (8002238 <UART_SetConfig+0x118>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	0119      	lsls	r1, r3, #4
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	009a      	lsls	r2, r3, #2
 80021c0:	441a      	add	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <UART_SetConfig+0x118>)
 80021ce:	fba3 0302 	umull	r0, r3, r3, r2
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2064      	movs	r0, #100	; 0x64
 80021d6:	fb00 f303 	mul.w	r3, r0, r3
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	3332      	adds	r3, #50	; 0x32
 80021e0:	4a15      	ldr	r2, [pc, #84]	; (8002238 <UART_SetConfig+0x118>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ec:	4419      	add	r1, r3
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009a      	lsls	r2, r3, #2
 80021f8:	441a      	add	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fbb2 f2f3 	udiv	r2, r2, r3
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <UART_SetConfig+0x118>)
 8002206:	fba3 0302 	umull	r0, r3, r3, r2
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2064      	movs	r0, #100	; 0x64
 800220e:	fb00 f303 	mul.w	r3, r0, r3
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	3332      	adds	r3, #50	; 0x32
 8002218:	4a07      	ldr	r2, [pc, #28]	; (8002238 <UART_SetConfig+0x118>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	f003 020f 	and.w	r2, r3, #15
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	440a      	add	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40013800 	.word	0x40013800
 8002238:	51eb851f 	.word	0x51eb851f

0800223c <__libc_init_array>:
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	2500      	movs	r5, #0
 8002240:	4e0c      	ldr	r6, [pc, #48]	; (8002274 <__libc_init_array+0x38>)
 8002242:	4c0d      	ldr	r4, [pc, #52]	; (8002278 <__libc_init_array+0x3c>)
 8002244:	1ba4      	subs	r4, r4, r6
 8002246:	10a4      	asrs	r4, r4, #2
 8002248:	42a5      	cmp	r5, r4
 800224a:	d109      	bne.n	8002260 <__libc_init_array+0x24>
 800224c:	f000 f822 	bl	8002294 <_init>
 8002250:	2500      	movs	r5, #0
 8002252:	4e0a      	ldr	r6, [pc, #40]	; (800227c <__libc_init_array+0x40>)
 8002254:	4c0a      	ldr	r4, [pc, #40]	; (8002280 <__libc_init_array+0x44>)
 8002256:	1ba4      	subs	r4, r4, r6
 8002258:	10a4      	asrs	r4, r4, #2
 800225a:	42a5      	cmp	r5, r4
 800225c:	d105      	bne.n	800226a <__libc_init_array+0x2e>
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002264:	4798      	blx	r3
 8002266:	3501      	adds	r5, #1
 8002268:	e7ee      	b.n	8002248 <__libc_init_array+0xc>
 800226a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800226e:	4798      	blx	r3
 8002270:	3501      	adds	r5, #1
 8002272:	e7f2      	b.n	800225a <__libc_init_array+0x1e>
 8002274:	080022fc 	.word	0x080022fc
 8002278:	080022fc 	.word	0x080022fc
 800227c:	080022fc 	.word	0x080022fc
 8002280:	08002300 	.word	0x08002300

08002284 <memset>:
 8002284:	4603      	mov	r3, r0
 8002286:	4402      	add	r2, r0
 8002288:	4293      	cmp	r3, r2
 800228a:	d100      	bne.n	800228e <memset+0xa>
 800228c:	4770      	bx	lr
 800228e:	f803 1b01 	strb.w	r1, [r3], #1
 8002292:	e7f9      	b.n	8002288 <memset+0x4>

08002294 <_init>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	bf00      	nop
 8002298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229a:	bc08      	pop	{r3}
 800229c:	469e      	mov	lr, r3
 800229e:	4770      	bx	lr

080022a0 <_fini>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	bf00      	nop
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr
