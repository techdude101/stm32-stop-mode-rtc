
STOP_MODE_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002708  08002708  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002708  08002708  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002708  08002708  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002708  08002708  00012708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  0800271c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  0800271c  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a57  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016b0  00000000  00000000  00026a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  00028140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  00028908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000165bb  00000000  00000000  00029008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000692a  00000000  00000000  0003f5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ff39  00000000  00000000  00045eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5e26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e08  00000000  00000000  000c5ea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026b0 	.word	0x080026b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080026b0 	.word	0x080026b0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fab5 	bl	80006c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f837 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f907 	bl	800036c <MX_GPIO_Init>
  MX_RTC_Init();
 800015e:	f000 f891 	bl	8000284 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8d9 	bl	8000318 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  resetTime();
 8000166:	f000 f985 	bl	8000474 <resetTime>
  setAlarm();
 800016a:	f000 f967 	bl	800043c <setAlarm>
//  uint8_t msg[] = "Startup...\r\n";
//  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 1000);

  LED_ON();
 800016e:	2200      	movs	r2, #0
 8000170:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000174:	4811      	ldr	r0, [pc, #68]	; (80001bc <main+0x70>)
 8000176:	f000 fd8f 	bl	8000c98 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800017a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800017e:	f000 fb01 	bl	8000784 <HAL_Delay>
  LED_OFF();
 8000182:	2201      	movs	r2, #1
 8000184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000188:	480c      	ldr	r0, [pc, #48]	; (80001bc <main+0x70>)
 800018a:	f000 fd85 	bl	8000c98 <HAL_GPIO_WritePin>

  enterStopMode();
 800018e:	f000 f947 	bl	8000420 <enterStopMode>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	RTC_TimeTypeDef sTime;
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); //To see the timing for debug
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	4619      	mov	r1, r3
 8000198:	4809      	ldr	r0, [pc, #36]	; (80001c0 <main+0x74>)
 800019a:	f001 fc75 	bl	8001a88 <HAL_RTC_GetTime>
    if (alarm_flag)
 800019e:	4b09      	ldr	r3, [pc, #36]	; (80001c4 <main+0x78>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d0f5      	beq.n	8000192 <main+0x46>
    {
        alarm_flag = 0;
 80001a6:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <main+0x78>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	701a      	strb	r2, [r3, #0]
        resetTime();
 80001ac:	f000 f962 	bl	8000474 <resetTime>
        setAlarm();
 80001b0:	f000 f944 	bl	800043c <setAlarm>
        enterStopMode();
 80001b4:	f000 f934 	bl	8000420 <enterStopMode>
  {
 80001b8:	e7eb      	b.n	8000192 <main+0x46>
 80001ba:	bf00      	nop
 80001bc:	40011000 	.word	0x40011000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	20000028 	.word	0x20000028

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b094      	sub	sp, #80	; 0x50
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 fa62 	bl	80026a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	f107 0314 	add.w	r3, r7, #20
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
 80001e4:	605a      	str	r2, [r3, #4]
 80001e6:	609a      	str	r2, [r3, #8]
 80001e8:	60da      	str	r2, [r3, #12]
 80001ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80001f8:	2305      	movs	r3, #5
 80001fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000200:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020a:	2301      	movs	r3, #1
 800020c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020e:	2302      	movs	r3, #2
 8000210:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000216:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000218:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800021c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000222:	4618      	mov	r0, r3
 8000224:	f000 fd74 	bl	8000d10 <HAL_RCC_OscConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800022e:	f000 f93b 	bl	80004a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000232:	230f      	movs	r3, #15
 8000234:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000236:	2302      	movs	r3, #2
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000242:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000248:	f107 0314 	add.w	r3, r7, #20
 800024c:	2102      	movs	r1, #2
 800024e:	4618      	mov	r0, r3
 8000250:	f000 ffde 	bl	8001210 <HAL_RCC_ClockConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800025a:	f000 f925 	bl	80004a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800025e:	2301      	movs	r3, #1
 8000260:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000266:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	4618      	mov	r0, r3
 800026c:	f001 f96c 	bl	8001548 <HAL_RCCEx_PeriphCLKConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000276:	f000 f917 	bl	80004a8 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3750      	adds	r7, #80	; 0x50
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2100      	movs	r1, #0
 800028e:	460a      	mov	r2, r1
 8000290:	801a      	strh	r2, [r3, #0]
 8000292:	460a      	mov	r2, r1
 8000294:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000296:	2300      	movs	r3, #0
 8000298:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <MX_RTC_Init+0x8c>)
 800029c:	4a1d      	ldr	r2, [pc, #116]	; (8000314 <MX_RTC_Init+0x90>)
 800029e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80002a0:	4b1b      	ldr	r3, [pc, #108]	; (8000310 <MX_RTC_Init+0x8c>)
 80002a2:	f04f 32ff 	mov.w	r2, #4294967295
 80002a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80002a8:	4b19      	ldr	r3, [pc, #100]	; (8000310 <MX_RTC_Init+0x8c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002ae:	4818      	ldr	r0, [pc, #96]	; (8000310 <MX_RTC_Init+0x8c>)
 80002b0:	f001 fabc 	bl	800182c <HAL_RTC_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80002ba:	f000 f8f5 	bl	80004a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2200      	movs	r2, #0
 80002ce:	4619      	mov	r1, r3
 80002d0:	480f      	ldr	r0, [pc, #60]	; (8000310 <MX_RTC_Init+0x8c>)
 80002d2:	f001 fb41 	bl	8001958 <HAL_RTC_SetTime>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80002dc:	f000 f8e4 	bl	80004a8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80002e0:	2301      	movs	r3, #1
 80002e2:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80002e4:	2301      	movs	r3, #1
 80002e6:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80002f0:	463b      	mov	r3, r7
 80002f2:	2200      	movs	r2, #0
 80002f4:	4619      	mov	r1, r3
 80002f6:	4806      	ldr	r0, [pc, #24]	; (8000310 <MX_RTC_Init+0x8c>)
 80002f8:	f001 fc9e 	bl	8001c38 <HAL_RTC_SetDate>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000302:	f000 f8d1 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
//  hrtc.Instance->CRH |= RTC_IT_ALRA;
  /* USER CODE END RTC_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	2000006c 	.word	0x2000006c
 8000314:	40002800 	.word	0x40002800

08000318 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 800031e:	4a12      	ldr	r2, [pc, #72]	; (8000368 <MX_USART1_UART_Init+0x50>)
 8000320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 800033e:	220c      	movs	r2, #12
 8000340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 800034a:	2200      	movs	r2, #0
 800034c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_USART1_UART_Init+0x4c>)
 8000350:	f002 f8a6 	bl	80024a0 <HAL_UART_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800035a:	f000 f8a5 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000002c 	.word	0x2000002c
 8000368:	40013800 	.word	0x40013800

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000380:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a1d      	ldr	r2, [pc, #116]	; (80003fc <MX_GPIO_Init+0x90>)
 8000386:	f043 0310 	orr.w	r3, r3, #16
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0310 	and.w	r3, r3, #16
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <MX_GPIO_Init+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a17      	ldr	r2, [pc, #92]	; (80003fc <MX_GPIO_Init+0x90>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <MX_GPIO_Init+0x90>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0320 	and.w	r3, r3, #32
 80003ac:	60bb      	str	r3, [r7, #8]
 80003ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <MX_GPIO_Init+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a11      	ldr	r2, [pc, #68]	; (80003fc <MX_GPIO_Init+0x90>)
 80003b6:	f043 0304 	orr.w	r3, r3, #4
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_GPIO_Init+0x90>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0304 	and.w	r3, r3, #4
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ce:	480c      	ldr	r0, [pc, #48]	; (8000400 <MX_GPIO_Init+0x94>)
 80003d0:	f000 fc62 	bl	8000c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2302      	movs	r3, #2
 80003e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	4619      	mov	r1, r3
 80003ec:	4804      	ldr	r0, [pc, #16]	; (8000400 <MX_GPIO_Init+0x94>)
 80003ee:	f000 faf9 	bl	80009e4 <HAL_GPIO_Init>

}
 80003f2:	bf00      	nop
 80003f4:	3720      	adds	r7, #32
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000
 8000400:	40011000 	.word	0x40011000

08000404 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
    alarm_flag = 1;
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <HAL_RTC_AlarmAEventCallback+0x18>)
 800040e:	2201      	movs	r2, #1
 8000410:	701a      	strb	r2, [r3, #0]
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	20000028 	.word	0x20000028

08000420 <enterStopMode>:
void enterStopMode(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <enterStopMode+0x18>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a03      	ldr	r2, [pc, #12]	; (8000438 <enterStopMode+0x18>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6013      	str	r3, [r2, #0]
 	HAL_PWR_EnterSTANDBYMode();
 8000430:	f000 fc56 	bl	8000ce0 <HAL_PWR_EnterSTANDBYMode>
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40007000 	.word	0x40007000

0800043c <setAlarm>:

void setAlarm(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
    RTC_AlarmTypeDef sAlarm;

    sAlarm.AlarmTime.Hours = 0U;
 8000442:	2300      	movs	r3, #0
 8000444:	703b      	strb	r3, [r7, #0]
    sAlarm.AlarmTime.Minutes = 0U;
 8000446:	2300      	movs	r3, #0
 8000448:	707b      	strb	r3, [r7, #1]
    sAlarm.AlarmTime.Seconds = SLEEP_TIME;
 800044a:	230a      	movs	r3, #10
 800044c:	70bb      	strb	r3, [r7, #2]
    sAlarm.Alarm = RTC_ALARM_A;
 800044e:	2300      	movs	r3, #0
 8000450:	607b      	str	r3, [r7, #4]

    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000452:	463b      	mov	r3, r7
 8000454:	2200      	movs	r2, #0
 8000456:	4619      	mov	r1, r3
 8000458:	4805      	ldr	r0, [pc, #20]	; (8000470 <setAlarm+0x34>)
 800045a:	f001 fca3 	bl	8001da4 <HAL_RTC_SetAlarm_IT>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <setAlarm+0x2c>
    {
	   Error_Handler();
 8000464:	f000 f820 	bl	80004a8 <Error_Handler>
    }
}
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	2000006c 	.word	0x2000006c

08000474 <resetTime>:

void resetTime(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime;

    sTime.Hours = 0U;
 800047a:	2300      	movs	r3, #0
 800047c:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0U;
 800047e:	2300      	movs	r3, #0
 8000480:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0U;
 8000482:	2300      	movs	r3, #0
 8000484:	71bb      	strb	r3, [r7, #6]

    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2201      	movs	r2, #1
 800048a:	4619      	mov	r1, r3
 800048c:	4805      	ldr	r0, [pc, #20]	; (80004a4 <resetTime+0x30>)
 800048e:	f001 fa63 	bl	8001958 <HAL_RTC_SetTime>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <resetTime+0x28>
    {
        Error_Handler();
 8000498:	f000 f806 	bl	80004a8 <Error_Handler>
    }
}
 800049c:	bf00      	nop
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	2000006c 	.word	0x2000006c

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ae:	e7fe      	b.n	80004ae <Error_Handler+0x6>

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <HAL_MspInit+0x5c>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a14      	ldr	r2, [pc, #80]	; (800050c <HAL_MspInit+0x5c>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_MspInit+0x5c>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x5c>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_MspInit+0x5c>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_MspInit+0x5c>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_MspInit+0x60>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_MspInit+0x60>)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000
 8000510:	40010000 	.word	0x40010000

08000514 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0f      	ldr	r2, [pc, #60]	; (8000560 <HAL_RTC_MspInit+0x4c>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d118      	bne.n	8000558 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000526:	f000 fbcf 	bl	8000cc8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_RTC_MspInit+0x50>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <HAL_RTC_MspInit+0x50>)
 8000530:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <HAL_RTC_MspInit+0x50>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <HAL_RTC_MspInit+0x54>)
 8000544:	2201      	movs	r2, #1
 8000546:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	2100      	movs	r1, #0
 800054c:	2029      	movs	r0, #41	; 0x29
 800054e:	f000 fa12 	bl	8000976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000552:	2029      	movs	r0, #41	; 0x29
 8000554:	f000 fa2b 	bl	80009ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40002800 	.word	0x40002800
 8000564:	40021000 	.word	0x40021000
 8000568:	4242043c 	.word	0x4242043c

0800056c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <HAL_UART_MspInit+0x8c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d131      	bne.n	80005f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <HAL_UART_MspInit+0x90>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a1a      	ldr	r2, [pc, #104]	; (80005fc <HAL_UART_MspInit+0x90>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b18      	ldr	r3, [pc, #96]	; (80005fc <HAL_UART_MspInit+0x90>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_UART_MspInit+0x90>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <HAL_UART_MspInit+0x90>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_UART_MspInit+0x90>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c2:	2302      	movs	r3, #2
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	4619      	mov	r1, r3
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <HAL_UART_MspInit+0x94>)
 80005d2:	f000 fa07 	bl	80009e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <HAL_UART_MspInit+0x94>)
 80005ec:	f000 f9fa 	bl	80009e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40013800 	.word	0x40013800
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010800 	.word	0x40010800

08000604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <NMI_Handler+0x4>

0800060a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <HardFault_Handler+0x4>

08000610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <MemManage_Handler+0x4>

08000616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <BusFault_Handler+0x4>

0800061c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <UsageFault_Handler+0x4>

08000622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064a:	f000 f87f 	bl	800074c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000658:	4802      	ldr	r0, [pc, #8]	; (8000664 <RTC_Alarm_IRQHandler+0x10>)
 800065a:	f001 fc57 	bl	8001f0c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000006c 	.word	0x2000006c

08000668 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000674:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000676:	e003      	b.n	8000680 <LoopCopyDataInit>

08000678 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800067a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800067c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800067e:	3104      	adds	r1, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000680:	480a      	ldr	r0, [pc, #40]	; (80006ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000684:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000686:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000688:	d3f6      	bcc.n	8000678 <CopyDataInit>
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800068c:	e002      	b.n	8000694 <LoopFillZerobss>

0800068e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000690:	f842 3b04 	str.w	r3, [r2], #4

08000694 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000696:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000698:	d3f9      	bcc.n	800068e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800069a:	f7ff ffe5 	bl	8000668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800069e:	f001 ffdb 	bl	8002658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a2:	f7ff fd53 	bl	800014c <main>
  bx lr
 80006a6:	4770      	bx	lr
  ldr r3, =_sidata
 80006a8:	08002710 	.word	0x08002710
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80006b4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80006b8:	20000084 	.word	0x20000084

080006bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>
	...

080006c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_Init+0x28>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_Init+0x28>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f945 	bl	8000960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f808 	bl	80006ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006dc:	f7ff fee8 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40022000 	.word	0x40022000

080006ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_InitTick+0x54>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x58>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000702:	fbb3 f3f1 	udiv	r3, r3, r1
 8000706:	fbb2 f3f3 	udiv	r3, r2, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f95d 	bl	80009ca <HAL_SYSTICK_Config>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	e00e      	b.n	8000738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	d80a      	bhi.n	8000736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000720:	2200      	movs	r2, #0
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	f04f 30ff 	mov.w	r0, #4294967295
 8000728:	f000 f925 	bl	8000976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_InitTick+0x5c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
 8000734:	e000      	b.n	8000738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000000 	.word	0x20000000
 8000744:	20000008 	.word	0x20000008
 8000748:	20000004 	.word	0x20000004

0800074c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_IncTick+0x1c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x20>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4413      	add	r3, r2
 800075c:	4a03      	ldr	r2, [pc, #12]	; (800076c <HAL_IncTick+0x20>)
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	20000008 	.word	0x20000008
 800076c:	20000080 	.word	0x20000080

08000770 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return uwTick;
 8000774:	4b02      	ldr	r3, [pc, #8]	; (8000780 <HAL_GetTick+0x10>)
 8000776:	681b      	ldr	r3, [r3, #0]
}
 8000778:	4618      	mov	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	20000080 	.word	0x20000080

08000784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800078c:	f7ff fff0 	bl	8000770 <HAL_GetTick>
 8000790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800079c:	d005      	beq.n	80007aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_Delay+0x40>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4413      	add	r3, r2
 80007a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007aa:	bf00      	nop
 80007ac:	f7ff ffe0 	bl	8000770 <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d8f7      	bhi.n	80007ac <HAL_Delay+0x28>
  {
  }
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000008 	.word	0x20000008

080007c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e4:	4013      	ands	r3, r2
 80007e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	60d3      	str	r3, [r2, #12]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <__NVIC_GetPriorityGrouping+0x18>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	f003 0307 	and.w	r3, r3, #7
}
 800081e:	4618      	mov	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	db0b      	blt.n	8000856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 021f 	and.w	r2, r3, #31
 8000844:	4906      	ldr	r1, [pc, #24]	; (8000860 <__NVIC_EnableIRQ+0x34>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	095b      	lsrs	r3, r3, #5
 800084c:	2001      	movs	r0, #1
 800084e:	fa00 f202 	lsl.w	r2, r0, r2
 8000852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	e000e100 	.word	0xe000e100

08000864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	db0a      	blt.n	800088e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	490c      	ldr	r1, [pc, #48]	; (80008b0 <__NVIC_SetPriority+0x4c>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	440b      	add	r3, r1
 8000888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800088c:	e00a      	b.n	80008a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <__NVIC_SetPriority+0x50>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	3b04      	subs	r3, #4
 800089c:	0112      	lsls	r2, r2, #4
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	761a      	strb	r2, [r3, #24]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e100 	.word	0xe000e100
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b089      	sub	sp, #36	; 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f1c3 0307 	rsb	r3, r3, #7
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	bf28      	it	cs
 80008d6:	2304      	movcs	r3, #4
 80008d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3304      	adds	r3, #4
 80008de:	2b06      	cmp	r3, #6
 80008e0:	d902      	bls.n	80008e8 <NVIC_EncodePriority+0x30>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3b03      	subs	r3, #3
 80008e6:	e000      	b.n	80008ea <NVIC_EncodePriority+0x32>
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43da      	mvns	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	401a      	ands	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000900:	f04f 31ff 	mov.w	r1, #4294967295
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43d9      	mvns	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	4313      	orrs	r3, r2
         );
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	; 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800092c:	d301      	bcc.n	8000932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092e:	2301      	movs	r3, #1
 8000930:	e00f      	b.n	8000952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <SysTick_Config+0x40>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093a:	210f      	movs	r1, #15
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f7ff ff90 	bl	8000864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <SysTick_Config+0x40>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <SysTick_Config+0x40>)
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	e000e010 	.word	0xe000e010

08000960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff ff2d 	bl	80007c8 <__NVIC_SetPriorityGrouping>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000976:	b580      	push	{r7, lr}
 8000978:	b086      	sub	sp, #24
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000988:	f7ff ff42 	bl	8000810 <__NVIC_GetPriorityGrouping>
 800098c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	6978      	ldr	r0, [r7, #20]
 8000994:	f7ff ff90 	bl	80008b8 <NVIC_EncodePriority>
 8000998:	4602      	mov	r2, r0
 800099a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff5f 	bl	8000864 <__NVIC_SetPriority>
}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff35 	bl	800082c <__NVIC_EnableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ffa2 	bl	800091c <SysTick_Config>
 80009d8:	4603      	mov	r3, r0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b08b      	sub	sp, #44	; 0x2c
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f6:	e127      	b.n	8000c48 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009f8:	2201      	movs	r2, #1
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	f040 8116 	bne.w	8000c42 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b12      	cmp	r3, #18
 8000a1c:	d034      	beq.n	8000a88 <HAL_GPIO_Init+0xa4>
 8000a1e:	2b12      	cmp	r3, #18
 8000a20:	d80d      	bhi.n	8000a3e <HAL_GPIO_Init+0x5a>
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d02b      	beq.n	8000a7e <HAL_GPIO_Init+0x9a>
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d804      	bhi.n	8000a34 <HAL_GPIO_Init+0x50>
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d031      	beq.n	8000a92 <HAL_GPIO_Init+0xae>
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d01c      	beq.n	8000a6c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a32:	e048      	b.n	8000ac6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	d043      	beq.n	8000ac0 <HAL_GPIO_Init+0xdc>
 8000a38:	2b11      	cmp	r3, #17
 8000a3a:	d01b      	beq.n	8000a74 <HAL_GPIO_Init+0x90>
          break;
 8000a3c:	e043      	b.n	8000ac6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a3e:	4a89      	ldr	r2, [pc, #548]	; (8000c64 <HAL_GPIO_Init+0x280>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d026      	beq.n	8000a92 <HAL_GPIO_Init+0xae>
 8000a44:	4a87      	ldr	r2, [pc, #540]	; (8000c64 <HAL_GPIO_Init+0x280>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d806      	bhi.n	8000a58 <HAL_GPIO_Init+0x74>
 8000a4a:	4a87      	ldr	r2, [pc, #540]	; (8000c68 <HAL_GPIO_Init+0x284>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d020      	beq.n	8000a92 <HAL_GPIO_Init+0xae>
 8000a50:	4a86      	ldr	r2, [pc, #536]	; (8000c6c <HAL_GPIO_Init+0x288>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d01d      	beq.n	8000a92 <HAL_GPIO_Init+0xae>
          break;
 8000a56:	e036      	b.n	8000ac6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a58:	4a85      	ldr	r2, [pc, #532]	; (8000c70 <HAL_GPIO_Init+0x28c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d019      	beq.n	8000a92 <HAL_GPIO_Init+0xae>
 8000a5e:	4a85      	ldr	r2, [pc, #532]	; (8000c74 <HAL_GPIO_Init+0x290>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d016      	beq.n	8000a92 <HAL_GPIO_Init+0xae>
 8000a64:	4a84      	ldr	r2, [pc, #528]	; (8000c78 <HAL_GPIO_Init+0x294>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d013      	beq.n	8000a92 <HAL_GPIO_Init+0xae>
          break;
 8000a6a:	e02c      	b.n	8000ac6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	623b      	str	r3, [r7, #32]
          break;
 8000a72:	e028      	b.n	8000ac6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	623b      	str	r3, [r7, #32]
          break;
 8000a7c:	e023      	b.n	8000ac6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	3308      	adds	r3, #8
 8000a84:	623b      	str	r3, [r7, #32]
          break;
 8000a86:	e01e      	b.n	8000ac6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	330c      	adds	r3, #12
 8000a8e:	623b      	str	r3, [r7, #32]
          break;
 8000a90:	e019      	b.n	8000ac6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	623b      	str	r3, [r7, #32]
          break;
 8000a9e:	e012      	b.n	8000ac6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d105      	bne.n	8000ab4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	611a      	str	r2, [r3, #16]
          break;
 8000ab2:	e008      	b.n	8000ac6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	69fa      	ldr	r2, [r7, #28]
 8000abc:	615a      	str	r2, [r3, #20]
          break;
 8000abe:	e002      	b.n	8000ac6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	2bff      	cmp	r3, #255	; 0xff
 8000aca:	d801      	bhi.n	8000ad0 <HAL_GPIO_Init+0xec>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	e001      	b.n	8000ad4 <HAL_GPIO_Init+0xf0>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	2bff      	cmp	r3, #255	; 0xff
 8000ada:	d802      	bhi.n	8000ae2 <HAL_GPIO_Init+0xfe>
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	e002      	b.n	8000ae8 <HAL_GPIO_Init+0x104>
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	3b08      	subs	r3, #8
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	210f      	movs	r1, #15
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	401a      	ands	r2, r3
 8000afa:	6a39      	ldr	r1, [r7, #32]
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	431a      	orrs	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f000 8096 	beq.w	8000c42 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b16:	4b59      	ldr	r3, [pc, #356]	; (8000c7c <HAL_GPIO_Init+0x298>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a58      	ldr	r2, [pc, #352]	; (8000c7c <HAL_GPIO_Init+0x298>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b56      	ldr	r3, [pc, #344]	; (8000c7c <HAL_GPIO_Init+0x298>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b2e:	4a54      	ldr	r2, [pc, #336]	; (8000c80 <HAL_GPIO_Init+0x29c>)
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	089b      	lsrs	r3, r3, #2
 8000b34:	3302      	adds	r3, #2
 8000b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	220f      	movs	r2, #15
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a4b      	ldr	r2, [pc, #300]	; (8000c84 <HAL_GPIO_Init+0x2a0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d013      	beq.n	8000b82 <HAL_GPIO_Init+0x19e>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a4a      	ldr	r2, [pc, #296]	; (8000c88 <HAL_GPIO_Init+0x2a4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d00d      	beq.n	8000b7e <HAL_GPIO_Init+0x19a>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a49      	ldr	r2, [pc, #292]	; (8000c8c <HAL_GPIO_Init+0x2a8>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d007      	beq.n	8000b7a <HAL_GPIO_Init+0x196>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a48      	ldr	r2, [pc, #288]	; (8000c90 <HAL_GPIO_Init+0x2ac>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_GPIO_Init+0x192>
 8000b72:	2303      	movs	r3, #3
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x1a0>
 8000b76:	2304      	movs	r3, #4
 8000b78:	e004      	b.n	8000b84 <HAL_GPIO_Init+0x1a0>
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	e002      	b.n	8000b84 <HAL_GPIO_Init+0x1a0>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <HAL_GPIO_Init+0x1a0>
 8000b82:	2300      	movs	r3, #0
 8000b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b86:	f002 0203 	and.w	r2, r2, #3
 8000b8a:	0092      	lsls	r2, r2, #2
 8000b8c:	4093      	lsls	r3, r2
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b94:	493a      	ldr	r1, [pc, #232]	; (8000c80 <HAL_GPIO_Init+0x29c>)
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	089b      	lsrs	r3, r3, #2
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d006      	beq.n	8000bbc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bae:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	4938      	ldr	r1, [pc, #224]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	600b      	str	r3, [r1, #0]
 8000bba:	e006      	b.n	8000bca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bbc:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	4933      	ldr	r1, [pc, #204]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d006      	beq.n	8000be4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	492e      	ldr	r1, [pc, #184]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	604b      	str	r3, [r1, #4]
 8000be2:	e006      	b.n	8000bf2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000be4:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000be6:	685a      	ldr	r2, [r3, #4]
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	4929      	ldr	r1, [pc, #164]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d006      	beq.n	8000c0c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bfe:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	4924      	ldr	r1, [pc, #144]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	608b      	str	r3, [r1, #8]
 8000c0a:	e006      	b.n	8000c1a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c0c:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	491f      	ldr	r1, [pc, #124]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d006      	beq.n	8000c34 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	491a      	ldr	r1, [pc, #104]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	60cb      	str	r3, [r1, #12]
 8000c32:	e006      	b.n	8000c42 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	4915      	ldr	r1, [pc, #84]	; (8000c94 <HAL_GPIO_Init+0x2b0>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	3301      	adds	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f47f aed0 	bne.w	80009f8 <HAL_GPIO_Init+0x14>
  }
}
 8000c58:	bf00      	nop
 8000c5a:	372c      	adds	r7, #44	; 0x2c
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	10210000 	.word	0x10210000
 8000c68:	10110000 	.word	0x10110000
 8000c6c:	10120000 	.word	0x10120000
 8000c70:	10310000 	.word	0x10310000
 8000c74:	10320000 	.word	0x10320000
 8000c78:	10220000 	.word	0x10220000
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010000 	.word	0x40010000
 8000c84:	40010800 	.word	0x40010800
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	40011400 	.word	0x40011400
 8000c94:	40010400 	.word	0x40010400

08000c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cb4:	e003      	b.n	8000cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	041a      	lsls	r2, r3, #16
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	611a      	str	r2, [r3, #16]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_PWR_EnableBkUpAccess+0x14>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	420e0020 	.word	0x420e0020

08000ce0 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8000cfc:	bf30      	wfi
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40007000 	.word	0x40007000
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e26c      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 8087 	beq.w	8000e3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d30:	4b92      	ldr	r3, [pc, #584]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 030c 	and.w	r3, r3, #12
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d00c      	beq.n	8000d56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d3c:	4b8f      	ldr	r3, [pc, #572]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	2b08      	cmp	r3, #8
 8000d46:	d112      	bne.n	8000d6e <HAL_RCC_OscConfig+0x5e>
 8000d48:	4b8c      	ldr	r3, [pc, #560]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d54:	d10b      	bne.n	8000d6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d56:	4b89      	ldr	r3, [pc, #548]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d06c      	beq.n	8000e3c <HAL_RCC_OscConfig+0x12c>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d168      	bne.n	8000e3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e246      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d76:	d106      	bne.n	8000d86 <HAL_RCC_OscConfig+0x76>
 8000d78:	4b80      	ldr	r3, [pc, #512]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a7f      	ldr	r2, [pc, #508]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e02e      	b.n	8000de4 <HAL_RCC_OscConfig+0xd4>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10c      	bne.n	8000da8 <HAL_RCC_OscConfig+0x98>
 8000d8e:	4b7b      	ldr	r3, [pc, #492]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a7a      	ldr	r2, [pc, #488]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	4b78      	ldr	r3, [pc, #480]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a77      	ldr	r2, [pc, #476]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e01d      	b.n	8000de4 <HAL_RCC_OscConfig+0xd4>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db0:	d10c      	bne.n	8000dcc <HAL_RCC_OscConfig+0xbc>
 8000db2:	4b72      	ldr	r3, [pc, #456]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a71      	ldr	r2, [pc, #452]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	4b6f      	ldr	r3, [pc, #444]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a6e      	ldr	r2, [pc, #440]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e00b      	b.n	8000de4 <HAL_RCC_OscConfig+0xd4>
 8000dcc:	4b6b      	ldr	r3, [pc, #428]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a6a      	ldr	r2, [pc, #424]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b68      	ldr	r3, [pc, #416]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a67      	ldr	r2, [pc, #412]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d013      	beq.n	8000e14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fcc0 	bl	8000770 <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df4:	f7ff fcbc 	bl	8000770 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	; 0x64
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e1fa      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e06:	4b5d      	ldr	r3, [pc, #372]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f0      	beq.n	8000df4 <HAL_RCC_OscConfig+0xe4>
 8000e12:	e014      	b.n	8000e3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fcac 	bl	8000770 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fca8 	bl	8000770 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b64      	cmp	r3, #100	; 0x64
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e1e6      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e2e:	4b53      	ldr	r3, [pc, #332]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x10c>
 8000e3a:	e000      	b.n	8000e3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d063      	beq.n	8000f12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e4a:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 030c 	and.w	r3, r3, #12
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00b      	beq.n	8000e6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e56:	4b49      	ldr	r3, [pc, #292]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 030c 	and.w	r3, r3, #12
 8000e5e:	2b08      	cmp	r3, #8
 8000e60:	d11c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x18c>
 8000e62:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d116      	bne.n	8000e9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6e:	4b43      	ldr	r3, [pc, #268]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d005      	beq.n	8000e86 <HAL_RCC_OscConfig+0x176>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d001      	beq.n	8000e86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e1ba      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e86:	4b3d      	ldr	r3, [pc, #244]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	4939      	ldr	r1, [pc, #228]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e9a:	e03a      	b.n	8000f12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d020      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ea4:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <HAL_RCC_OscConfig+0x270>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fc61 	bl	8000770 <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb2:	f7ff fc5d 	bl	8000770 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e19b      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec4:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0f0      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed0:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	4927      	ldr	r1, [pc, #156]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	600b      	str	r3, [r1, #0]
 8000ee4:	e015      	b.n	8000f12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fc40 	bl	8000770 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef4:	f7ff fc3c 	bl	8000770 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e17a      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d03a      	beq.n	8000f94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d019      	beq.n	8000f5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_RCC_OscConfig+0x274>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2c:	f7ff fc20 	bl	8000770 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f34:	f7ff fc1c 	bl	8000770 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e15a      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_RCC_OscConfig+0x26c>)
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f0      	beq.n	8000f34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f000 fada 	bl	800150c <RCC_Delay>
 8000f58:	e01c      	b.n	8000f94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_RCC_OscConfig+0x274>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f60:	f7ff fc06 	bl	8000770 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f66:	e00f      	b.n	8000f88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f68:	f7ff fc02 	bl	8000770 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d908      	bls.n	8000f88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e140      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	42420000 	.word	0x42420000
 8000f84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f88:	4b9e      	ldr	r3, [pc, #632]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1e9      	bne.n	8000f68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80a6 	beq.w	80010ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa6:	4b97      	ldr	r3, [pc, #604]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10d      	bne.n	8000fce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b94      	ldr	r3, [pc, #592]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a93      	ldr	r2, [pc, #588]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b91      	ldr	r3, [pc, #580]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fce:	4b8e      	ldr	r3, [pc, #568]	; (8001208 <HAL_RCC_OscConfig+0x4f8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d118      	bne.n	800100c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fda:	4b8b      	ldr	r3, [pc, #556]	; (8001208 <HAL_RCC_OscConfig+0x4f8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a8a      	ldr	r2, [pc, #552]	; (8001208 <HAL_RCC_OscConfig+0x4f8>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fbc3 	bl	8000770 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fee:	f7ff fbbf 	bl	8000770 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b64      	cmp	r3, #100	; 0x64
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e0fd      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001000:	4b81      	ldr	r3, [pc, #516]	; (8001208 <HAL_RCC_OscConfig+0x4f8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d106      	bne.n	8001022 <HAL_RCC_OscConfig+0x312>
 8001014:	4b7b      	ldr	r3, [pc, #492]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4a7a      	ldr	r2, [pc, #488]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6213      	str	r3, [r2, #32]
 8001020:	e02d      	b.n	800107e <HAL_RCC_OscConfig+0x36e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10c      	bne.n	8001044 <HAL_RCC_OscConfig+0x334>
 800102a:	4b76      	ldr	r3, [pc, #472]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	4a75      	ldr	r2, [pc, #468]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	6213      	str	r3, [r2, #32]
 8001036:	4b73      	ldr	r3, [pc, #460]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4a72      	ldr	r2, [pc, #456]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800103c:	f023 0304 	bic.w	r3, r3, #4
 8001040:	6213      	str	r3, [r2, #32]
 8001042:	e01c      	b.n	800107e <HAL_RCC_OscConfig+0x36e>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	2b05      	cmp	r3, #5
 800104a:	d10c      	bne.n	8001066 <HAL_RCC_OscConfig+0x356>
 800104c:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4a6c      	ldr	r2, [pc, #432]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	6213      	str	r3, [r2, #32]
 8001058:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	4a69      	ldr	r2, [pc, #420]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6213      	str	r3, [r2, #32]
 8001064:	e00b      	b.n	800107e <HAL_RCC_OscConfig+0x36e>
 8001066:	4b67      	ldr	r3, [pc, #412]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4a66      	ldr	r2, [pc, #408]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	6213      	str	r3, [r2, #32]
 8001072:	4b64      	ldr	r3, [pc, #400]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4a63      	ldr	r2, [pc, #396]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001078:	f023 0304 	bic.w	r3, r3, #4
 800107c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d015      	beq.n	80010b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001086:	f7ff fb73 	bl	8000770 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108c:	e00a      	b.n	80010a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800108e:	f7ff fb6f 	bl	8000770 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	f241 3288 	movw	r2, #5000	; 0x1388
 800109c:	4293      	cmp	r3, r2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e0ab      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a4:	4b57      	ldr	r3, [pc, #348]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0ee      	beq.n	800108e <HAL_RCC_OscConfig+0x37e>
 80010b0:	e014      	b.n	80010dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b2:	f7ff fb5d 	bl	8000770 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b8:	e00a      	b.n	80010d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ba:	f7ff fb59 	bl	8000770 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e095      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d0:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1ee      	bne.n	80010ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d105      	bne.n	80010ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e2:	4b48      	ldr	r3, [pc, #288]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a47      	ldr	r2, [pc, #284]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80010e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8081 	beq.w	80011fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f8:	4b42      	ldr	r3, [pc, #264]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b08      	cmp	r3, #8
 8001102:	d061      	beq.n	80011c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d146      	bne.n	800119a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800110c:	4b3f      	ldr	r3, [pc, #252]	; (800120c <HAL_RCC_OscConfig+0x4fc>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001112:	f7ff fb2d 	bl	8000770 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111a:	f7ff fb29 	bl	8000770 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e067      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112c:	4b35      	ldr	r3, [pc, #212]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f0      	bne.n	800111a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001140:	d108      	bne.n	8001154 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	492d      	ldr	r1, [pc, #180]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a19      	ldr	r1, [r3, #32]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	430b      	orrs	r3, r1
 8001166:	4927      	ldr	r1, [pc, #156]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <HAL_RCC_OscConfig+0x4fc>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001172:	f7ff fafd 	bl	8000770 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117a:	f7ff faf9 	bl	8000770 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e037      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0x46a>
 8001198:	e02f      	b.n	80011fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_RCC_OscConfig+0x4fc>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fae6 	bl	8000770 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a8:	f7ff fae2 	bl	8000770 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e020      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0x498>
 80011c6:	e018      	b.n	80011fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e013      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_RCC_OscConfig+0x4f4>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000
 8001208:	40007000 	.word	0x40007000
 800120c:	42420060 	.word	0x42420060

08001210 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e0d0      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001224:	4b6a      	ldr	r3, [pc, #424]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d910      	bls.n	8001254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	4b67      	ldr	r3, [pc, #412]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 0207 	bic.w	r2, r3, #7
 800123a:	4965      	ldr	r1, [pc, #404]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d001      	beq.n	8001254 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e0b8      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800126c:	4b59      	ldr	r3, [pc, #356]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4a58      	ldr	r2, [pc, #352]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001276:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001284:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4a52      	ldr	r2, [pc, #328]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800128a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800128e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001290:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	494d      	ldr	r1, [pc, #308]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d040      	beq.n	8001330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d107      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d115      	bne.n	80012ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e07f      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d107      	bne.n	80012de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ce:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d109      	bne.n	80012ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e073      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012de:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e06b      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ee:	4b39      	ldr	r3, [pc, #228]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f023 0203 	bic.w	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4936      	ldr	r1, [pc, #216]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001300:	f7ff fa36 	bl	8000770 <HAL_GetTick>
 8001304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001306:	e00a      	b.n	800131e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001308:	f7ff fa32 	bl	8000770 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	f241 3288 	movw	r2, #5000	; 0x1388
 8001316:	4293      	cmp	r3, r2
 8001318:	d901      	bls.n	800131e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e053      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 020c 	and.w	r2, r3, #12
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	429a      	cmp	r2, r3
 800132e:	d1eb      	bne.n	8001308 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d210      	bcs.n	8001360 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 0207 	bic.w	r2, r3, #7
 8001346:	4922      	ldr	r1, [pc, #136]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d001      	beq.n	8001360 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e032      	b.n	80013c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4916      	ldr	r1, [pc, #88]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d009      	beq.n	800139e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	490e      	ldr	r1, [pc, #56]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800139e:	f000 f821 	bl	80013e4 <HAL_RCC_GetSysClockFreq>
 80013a2:	4601      	mov	r1, r0
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_RCC_ClockConfig+0x1c8>)
 80013b0:	5cd3      	ldrb	r3, [r2, r3]
 80013b2:	fa21 f303 	lsr.w	r3, r1, r3
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <HAL_RCC_ClockConfig+0x1cc>)
 80013b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_RCC_ClockConfig+0x1d0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f994 	bl	80006ec <HAL_InitTick>

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40022000 	.word	0x40022000
 80013d4:	40021000 	.word	0x40021000
 80013d8:	080026f0 	.word	0x080026f0
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e4:	b490      	push	{r4, r7}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013ec:	1d3c      	adds	r4, r7, #4
 80013ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013f4:	4b28      	ldr	r3, [pc, #160]	; (8001498 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b04      	cmp	r3, #4
 800141c:	d002      	beq.n	8001424 <HAL_RCC_GetSysClockFreq+0x40>
 800141e:	2b08      	cmp	r3, #8
 8001420:	d003      	beq.n	800142a <HAL_RCC_GetSysClockFreq+0x46>
 8001422:	e02d      	b.n	8001480 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001426:	623b      	str	r3, [r7, #32]
      break;
 8001428:	e02d      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	0c9b      	lsrs	r3, r3, #18
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001436:	4413      	add	r3, r2
 8001438:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800143c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d013      	beq.n	8001470 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_RCC_GetSysClockFreq+0xb8>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	0c5b      	lsrs	r3, r3, #17
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001456:	4413      	add	r3, r2
 8001458:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800145c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001462:	fb02 f203 	mul.w	r2, r2, r3
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	fbb2 f3f3 	udiv	r3, r2, r3
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
 800146e:	e004      	b.n	800147a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	623b      	str	r3, [r7, #32]
      break;
 800147e:	e002      	b.n	8001486 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001482:	623b      	str	r3, [r7, #32]
      break;
 8001484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001486:	6a3b      	ldr	r3, [r7, #32]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bc90      	pop	{r4, r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	080026c8 	.word	0x080026c8
 8001498:	080026d8 	.word	0x080026d8
 800149c:	40021000 	.word	0x40021000
 80014a0:	007a1200 	.word	0x007a1200
 80014a4:	003d0900 	.word	0x003d0900

080014a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000000 	.word	0x20000000

080014bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014c0:	f7ff fff2 	bl	80014a8 <HAL_RCC_GetHCLKFreq>
 80014c4:	4601      	mov	r1, r0
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	4a03      	ldr	r2, [pc, #12]	; (80014e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	08002700 	.word	0x08002700

080014e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014e8:	f7ff ffde 	bl	80014a8 <HAL_RCC_GetHCLKFreq>
 80014ec:	4601      	mov	r1, r0
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	0adb      	lsrs	r3, r3, #11
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	4a03      	ldr	r2, [pc, #12]	; (8001508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014fa:	5cd3      	ldrb	r3, [r2, r3]
 80014fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	08002700 	.word	0x08002700

0800150c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <RCC_Delay+0x34>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <RCC_Delay+0x38>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0a5b      	lsrs	r3, r3, #9
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001528:	bf00      	nop
  }
  while (Delay --);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	60fa      	str	r2, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f9      	bne.n	8001528 <RCC_Delay+0x1c>
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000000 	.word	0x20000000
 8001544:	10624dd3 	.word	0x10624dd3

08001548 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d07d      	beq.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001568:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10d      	bne.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	4b4c      	ldr	r3, [pc, #304]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	4a4b      	ldr	r2, [pc, #300]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157e:	61d3      	str	r3, [r2, #28]
 8001580:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158c:	2301      	movs	r3, #1
 800158e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b46      	ldr	r3, [pc, #280]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d118      	bne.n	80015ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159c:	4b43      	ldr	r3, [pc, #268]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a42      	ldr	r2, [pc, #264]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a8:	f7ff f8e2 	bl	8000770 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	e008      	b.n	80015c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b0:	f7ff f8de 	bl	8000770 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e06d      	b.n	800169e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015ce:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d02e      	beq.n	800163c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d027      	beq.n	800163c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015fc:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001602:	4a29      	ldr	r2, [pc, #164]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d014      	beq.n	800163c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff f8ad 	bl	8000770 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	e00a      	b.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff f8a9 	bl	8000770 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e036      	b.n	800169e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0ee      	beq.n	800161a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4917      	ldr	r1, [pc, #92]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800164a:	4313      	orrs	r3, r2
 800164c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d105      	bne.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800165a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	490b      	ldr	r1, [pc, #44]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800167a:	4313      	orrs	r3, r2
 800167c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	4904      	ldr	r1, [pc, #16]	; (80016a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40007000 	.word	0x40007000
 80016b0:	42420440 	.word	0x42420440

080016b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b08d      	sub	sp, #52	; 0x34
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016bc:	4b55      	ldr	r3, [pc, #340]	; (8001814 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80016be:	f107 040c 	add.w	r4, r7, #12
 80016c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016c8:	4b53      	ldr	r3, [pc, #332]	; (8001818 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	2300      	movs	r3, #0
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d07f      	beq.n	80017e8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80016e8:	2b10      	cmp	r3, #16
 80016ea:	d002      	beq.n	80016f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d048      	beq.n	8001782 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80016f0:	e08b      	b.n	800180a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80016f8:	4b48      	ldr	r3, [pc, #288]	; (800181c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d07f      	beq.n	8001804 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	0c9b      	lsrs	r3, r3, #18
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001710:	4413      	add	r3, r2
 8001712:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001716:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d018      	beq.n	8001754 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001722:	4b3e      	ldr	r3, [pc, #248]	; (800181c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	0c5b      	lsrs	r3, r3, #17
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001730:	4413      	add	r3, r2
 8001732:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00d      	beq.n	800175e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001742:	4a37      	ldr	r2, [pc, #220]	; (8001820 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	fbb2 f2f3 	udiv	r2, r2, r3
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	fb02 f303 	mul.w	r3, r2, r3
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001752:	e004      	b.n	800175e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	4a33      	ldr	r2, [pc, #204]	; (8001824 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001758:	fb02 f303 	mul.w	r3, r2, r3
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800175e:	4b2f      	ldr	r3, [pc, #188]	; (800181c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800176a:	d102      	bne.n	8001772 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001770:	e048      	b.n	8001804 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4a2c      	ldr	r2, [pc, #176]	; (8001828 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	085b      	lsrs	r3, r3, #1
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001780:	e040      	b.n	8001804 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800178e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001792:	d108      	bne.n	80017a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800179e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a4:	e01f      	b.n	80017e6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b0:	d109      	bne.n	80017c6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80017be:	f649 4340 	movw	r3, #40000	; 0x9c40
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80017c4:	e00f      	b.n	80017e6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017d0:	d11a      	bne.n	8001808 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d014      	beq.n	8001808 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80017de:	f24f 4324 	movw	r3, #62500	; 0xf424
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80017e4:	e010      	b.n	8001808 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80017e6:	e00f      	b.n	8001808 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80017e8:	f7ff fe7c 	bl	80014e4 <HAL_RCC_GetPCLK2Freq>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	0b9b      	lsrs	r3, r3, #14
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	3301      	adds	r3, #1
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001802:	e002      	b.n	800180a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001804:	bf00      	nop
 8001806:	e000      	b.n	800180a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001808:	bf00      	nop
    }
  }
  return (frequency);
 800180a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800180c:	4618      	mov	r0, r3
 800180e:	3734      	adds	r7, #52	; 0x34
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	080026dc 	.word	0x080026dc
 8001818:	080026ec 	.word	0x080026ec
 800181c:	40021000 	.word	0x40021000
 8001820:	007a1200 	.word	0x007a1200
 8001824:	003d0900 	.word	0x003d0900
 8001828:	aaaaaaab 	.word	0xaaaaaaab

0800182c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e084      	b.n	800194c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7c5b      	ldrb	r3, [r3, #17]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d105      	bne.n	8001858 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7fe fe5e 	bl	8000514 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2202      	movs	r2, #2
 800185c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fb7c 	bl	8001f5c <HAL_RTC_WaitForSynchro>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2204      	movs	r2, #4
 800186e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e06b      	b.n	800194c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 fc35 	bl	80020e4 <RTC_EnterInitMode>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d004      	beq.n	800188a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2204      	movs	r2, #4
 8001884:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e060      	b.n	800194c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0207 	bic.w	r2, r2, #7
 8001898:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d005      	beq.n	80018ae <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80018a2:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_RTC_Init+0x128>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a2b      	ldr	r2, [pc, #172]	; (8001954 <HAL_RTC_Init+0x128>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80018ae:	4b29      	ldr	r3, [pc, #164]	; (8001954 <HAL_RTC_Init+0x128>)
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	4926      	ldr	r1, [pc, #152]	; (8001954 <HAL_RTC_Init+0x128>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c8:	d003      	beq.n	80018d2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e00e      	b.n	80018f0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7ff feee 	bl	80016b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80018d8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d104      	bne.n	80018ea <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2204      	movs	r2, #4
 80018e4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e030      	b.n	800194c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f023 010f 	bic.w	r1, r3, #15
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	0c1a      	lsrs	r2, r3, #16
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0c1b      	lsrs	r3, r3, #16
 800190e:	041b      	lsls	r3, r3, #16
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	b291      	uxth	r1, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	430b      	orrs	r3, r1
 800191a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 fc09 	bl	8002134 <RTC_ExitInitMode>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2204      	movs	r2, #4
 800192c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e00c      	b.n	800194c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800194a:	2300      	movs	r3, #0
  }
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40006c00 	.word	0x40006c00

08001958 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_RTC_SetTime+0x20>
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e080      	b.n	8001a7e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	7c1b      	ldrb	r3, [r3, #16]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_RTC_SetTime+0x30>
 8001984:	2302      	movs	r3, #2
 8001986:	e07a      	b.n	8001a7e <HAL_RTC_SetTime+0x126>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2202      	movs	r2, #2
 8001992:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d113      	bne.n	80019c2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80019a4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	785b      	ldrb	r3, [r3, #1]
 80019ac:	4619      	mov	r1, r3
 80019ae:	460b      	mov	r3, r1
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	1a5b      	subs	r3, r3, r1
 80019b4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80019b6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80019bc:	4413      	add	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e01e      	b.n	8001a00 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fbf9 	bl	80021be <RTC_Bcd2ToByte>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80019d4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	785b      	ldrb	r3, [r3, #1]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fbee 	bl	80021be <RTC_Bcd2ToByte>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	4613      	mov	r3, r2
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80019ee:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	789b      	ldrb	r3, [r3, #2]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fbe2 	bl	80021be <RTC_Bcd2ToByte>
 80019fa:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80019fc:	4423      	add	r3, r4
 80019fe:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001a00:	6979      	ldr	r1, [r7, #20]
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fb07 	bl	8002016 <RTC_WriteTimeCounter>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2204      	movs	r2, #4
 8001a12:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e02f      	b.n	8001a7e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0205 	bic.w	r2, r2, #5
 8001a2c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fb18 	bl	8002064 <RTC_ReadAlarmCounter>
 8001a34:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3c:	d018      	beq.n	8001a70 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d214      	bcs.n	8001a70 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001a4c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a50:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001a52:	6939      	ldr	r1, [r7, #16]
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 fb1e 	bl	8002096 <RTC_WriteAlarmCounter>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2204      	movs	r2, #4
 8001a64:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e006      	b.n	8001a7e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
  }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}
	...

08001a88 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <HAL_RTC_GetTime+0x28>
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0b5      	b.n	8001c20 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0ac      	b.n	8001c20 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 fa75 	bl	8001fb6 <RTC_ReadTimeCounter>
 8001acc:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4a55      	ldr	r2, [pc, #340]	; (8001c28 <HAL_RTC_GetTime+0x1a0>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0adb      	lsrs	r3, r3, #11
 8001ad8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4b52      	ldr	r3, [pc, #328]	; (8001c28 <HAL_RTC_GetTime+0x1a0>)
 8001ade:	fba3 1302 	umull	r1, r3, r3, r2
 8001ae2:	0adb      	lsrs	r3, r3, #11
 8001ae4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4a4f      	ldr	r2, [pc, #316]	; (8001c2c <HAL_RTC_GetTime+0x1a4>)
 8001af0:	fba2 2303 	umull	r2, r3, r2, r3
 8001af4:	095b      	lsrs	r3, r3, #5
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	4a4a      	ldr	r2, [pc, #296]	; (8001c28 <HAL_RTC_GetTime+0x1a0>)
 8001b00:	fba2 1203 	umull	r1, r2, r2, r3
 8001b04:	0ad2      	lsrs	r2, r2, #11
 8001b06:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001b0a:	fb01 f202 	mul.w	r2, r1, r2
 8001b0e:	1a9a      	subs	r2, r3, r2
 8001b10:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <HAL_RTC_GetTime+0x1a4>)
 8001b12:	fba3 1302 	umull	r1, r3, r3, r2
 8001b16:	0959      	lsrs	r1, r3, #5
 8001b18:	460b      	mov	r3, r1
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	1a5b      	subs	r3, r3, r1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	1ad1      	subs	r1, r2, r3
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b17      	cmp	r3, #23
 8001b2c:	d955      	bls.n	8001bda <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4a3f      	ldr	r2, [pc, #252]	; (8001c30 <HAL_RTC_GetTime+0x1a8>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001b3a:	6939      	ldr	r1, [r7, #16]
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <HAL_RTC_GetTime+0x1a8>)
 8001b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8001b42:	091a      	lsrs	r2, r3, #4
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	1aca      	subs	r2, r1, r3
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 fa85 	bl	8002064 <RTC_ReadAlarmCounter>
 8001b5a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b62:	d008      	beq.n	8001b76 <HAL_RTC_GetTime+0xee>
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d904      	bls.n	8001b76 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	e002      	b.n	8001b7c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	4a2d      	ldr	r2, [pc, #180]	; (8001c34 <HAL_RTC_GetTime+0x1ac>)
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001b8a:	69b9      	ldr	r1, [r7, #24]
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 fa42 	bl	8002016 <RTC_WriteTimeCounter>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e041      	b.n	8001c20 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba2:	d00c      	beq.n	8001bbe <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4413      	add	r3, r2
 8001baa:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001bac:	69f9      	ldr	r1, [r7, #28]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 fa71 	bl	8002096 <RTC_WriteAlarmCounter>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00a      	beq.n	8001bd0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e030      	b.n	8001c20 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001bbe:	69f9      	ldr	r1, [r7, #28]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fa68 	bl	8002096 <RTC_WriteAlarmCounter>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e027      	b.n	8001c20 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8001bd0:	6979      	ldr	r1, [r7, #20]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 fb10 	bl	80021f8 <RTC_DateUpdate>
 8001bd8:	e003      	b.n	8001be2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01a      	beq.n	8001c1e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fac9 	bl	8002184 <RTC_ByteToBcd2>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fac0 	bl	8002184 <RTC_ByteToBcd2>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	789b      	ldrb	r3, [r3, #2]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fab7 	bl	8002184 <RTC_ByteToBcd2>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	91a2b3c5 	.word	0x91a2b3c5
 8001c2c:	88888889 	.word	0x88888889
 8001c30:	aaaaaaab 	.word	0xaaaaaaab
 8001c34:	00015180 	.word	0x00015180

08001c38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <HAL_RTC_SetDate+0x24>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e097      	b.n	8001d90 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	7c1b      	ldrb	r3, [r3, #16]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_RTC_SetDate+0x34>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e091      	b.n	8001d90 <HAL_RTC_SetDate+0x158>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2202      	movs	r2, #2
 8001c76:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	78da      	ldrb	r2, [r3, #3]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	785a      	ldrb	r2, [r3, #1]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	789a      	ldrb	r2, [r3, #2]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	739a      	strb	r2, [r3, #14]
 8001c96:	e01a      	b.n	8001cce <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	78db      	ldrb	r3, [r3, #3]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fa8e 	bl	80021be <RTC_Bcd2ToByte>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	785b      	ldrb	r3, [r3, #1]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fa85 	bl	80021be <RTC_Bcd2ToByte>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	789b      	ldrb	r3, [r3, #2]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fa7c 	bl	80021be <RTC_Bcd2ToByte>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	7bdb      	ldrb	r3, [r3, #15]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	7b59      	ldrb	r1, [r3, #13]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	7b9b      	ldrb	r3, [r3, #14]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f000 fb67 	bl	80023b0 <RTC_WeekDayNum>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	7b1a      	ldrb	r2, [r3, #12]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f95f 	bl	8001fb6 <RTC_ReadTimeCounter>
 8001cf8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	4a26      	ldr	r2, [pc, #152]	; (8001d98 <HAL_RTC_SetDate+0x160>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0adb      	lsrs	r3, r3, #11
 8001d04:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2b18      	cmp	r3, #24
 8001d0a:	d93a      	bls.n	8001d82 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <HAL_RTC_SetDate+0x164>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	4a22      	ldr	r2, [pc, #136]	; (8001da0 <HAL_RTC_SetDate+0x168>)
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001d22:	69f9      	ldr	r1, [r7, #28]
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 f976 	bl	8002016 <RTC_WriteTimeCounter>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2204      	movs	r2, #4
 8001d34:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e027      	b.n	8001d90 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 f98f 	bl	8002064 <RTC_ReadAlarmCounter>
 8001d46:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4e:	d018      	beq.n	8001d82 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d214      	bcs.n	8001d82 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001d5e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d62:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001d64:	69b9      	ldr	r1, [r7, #24]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f995 	bl	8002096 <RTC_WriteAlarmCounter>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d007      	beq.n	8001d82 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2204      	movs	r2, #4
 8001d76:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e006      	b.n	8001d90 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	91a2b3c5 	.word	0x91a2b3c5
 8001d9c:	aaaaaaab 	.word	0xaaaaaaab
 8001da0:	00015180 	.word	0x00015180

08001da4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2100      	movs	r1, #0
 8001dba:	460a      	mov	r2, r1
 8001dbc:	801a      	strh	r2, [r3, #0]
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_RTC_SetAlarm_IT+0x2a>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e096      	b.n	8001f00 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	7c1b      	ldrb	r3, [r3, #16]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_RTC_SetAlarm_IT+0x3a>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e090      	b.n	8001f00 <HAL_RTC_SetAlarm_IT+0x15c>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2201      	movs	r2, #1
 8001de2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2202      	movs	r2, #2
 8001de8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	2200      	movs	r2, #0
 8001df0:	4619      	mov	r1, r3
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f7ff fe48 	bl	8001a88 <HAL_RTC_GetTime>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e07e      	b.n	8001f00 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001e02:	7d3b      	ldrb	r3, [r7, #20]
 8001e04:	461a      	mov	r2, r3
 8001e06:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001e0a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8001e0e:	7d7b      	ldrb	r3, [r7, #21]
 8001e10:	4619      	mov	r1, r3
 8001e12:	460b      	mov	r3, r1
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	1a5b      	subs	r3, r3, r1
 8001e18:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001e1a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8001e1c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001e1e:	4413      	add	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d113      	bne.n	8001e50 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001e32:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	785b      	ldrb	r3, [r3, #1]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	1a5b      	subs	r3, r3, r1
 8001e42:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001e44:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001e4a:	4413      	add	r3, r2
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e01e      	b.n	8001e8e <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f9b2 	bl	80021be <RTC_Bcd2ToByte>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001e62:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	785b      	ldrb	r3, [r3, #1]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f9a7 	bl	80021be <RTC_Bcd2ToByte>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	4613      	mov	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001e7c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	789b      	ldrb	r3, [r3, #2]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f99b 	bl	80021be <RTC_Bcd2ToByte>
 8001e88:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001e8a:	4423      	add	r3, r4
 8001e8c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d205      	bcs.n	8001ea2 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001e9c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ea0:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001ea2:	69f9      	ldr	r1, [r7, #28]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f8f6 	bl	8002096 <RTC_WriteAlarmCounter>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e01f      	b.n	8001f00 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0202 	mvn.w	r2, #2
 8001ec8:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0202 	orr.w	r2, r2, #2
 8001ed8:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_RTC_SetAlarm_IT+0x164>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_RTC_SetAlarm_IT+0x164>)
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee4:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_RTC_SetAlarm_IT+0x164>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_RTC_SetAlarm_IT+0x164>)
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001efe:	2300      	movs	r3, #0
  }
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3724      	adds	r7, #36	; 0x24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd90      	pop	{r4, r7, pc}
 8001f08:	40010400 	.word	0x40010400

08001f0c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00e      	beq.n	8001f40 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7fe fa67 	bl	8000404 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f06f 0202 	mvn.w	r2, #2
 8001f3e:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8001f42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f46:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	745a      	strb	r2, [r3, #17]
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e01d      	b.n	8001fae <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0208 	bic.w	r2, r2, #8
 8001f80:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001f82:	f7fe fbf5 	bl	8000770 <HAL_GetTick>
 8001f86:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001f88:	e009      	b.n	8001f9e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001f8a:	f7fe fbf1 	bl	8000770 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f98:	d901      	bls.n	8001f9e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e007      	b.n	8001fae <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0ee      	beq.n	8001f8a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	827b      	strh	r3, [r7, #18]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	823b      	strh	r3, [r7, #16]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001fe6:	8a7a      	ldrh	r2, [r7, #18]
 8001fe8:	8a3b      	ldrh	r3, [r7, #16]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d008      	beq.n	8002000 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001fee:	8a3b      	ldrh	r3, [r7, #16]
 8001ff0:	041a      	lsls	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	e004      	b.n	800200a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002000:	8a7b      	ldrh	r3, [r7, #18]
 8002002:	041a      	lsls	r2, r3, #16
 8002004:	89fb      	ldrh	r3, [r7, #14]
 8002006:	4313      	orrs	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800200a:	697b      	ldr	r3, [r7, #20]
}
 800200c:	4618      	mov	r0, r3
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f85d 	bl	80020e4 <RTC_EnterInitMode>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	e011      	b.n	800205a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	0c12      	lsrs	r2, r2, #16
 800203e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	b292      	uxth	r2, r2
 8002048:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f872 	bl	8002134 <RTC_ExitInitMode>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	81fb      	strh	r3, [r7, #14]
 8002070:	2300      	movs	r3, #0
 8002072:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002084:	89fb      	ldrh	r3, [r7, #14]
 8002086:	041a      	lsls	r2, r3, #16
 8002088:	89bb      	ldrh	r3, [r7, #12]
 800208a:	4313      	orrs	r3, r2
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr

08002096 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f81d 	bl	80020e4 <RTC_EnterInitMode>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	e011      	b.n	80020da <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	0c12      	lsrs	r2, r2, #16
 80020be:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	b292      	uxth	r2, r2
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f832 	bl	8002134 <RTC_ExitInitMode>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80020f0:	f7fe fb3e 	bl	8000770 <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020f6:	e009      	b.n	800210c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020f8:	f7fe fb3a 	bl	8000770 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002106:	d901      	bls.n	800210c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e00f      	b.n	800212c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0ee      	beq.n	80020f8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0210 	orr.w	r2, r2, #16
 8002128:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0210 	bic.w	r2, r2, #16
 800214e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002150:	f7fe fb0e 	bl	8000770 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002156:	e009      	b.n	800216c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002158:	f7fe fb0a 	bl	8000770 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002166:	d901      	bls.n	800216c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e007      	b.n	800217c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0ee      	beq.n	8002158 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002192:	e005      	b.n	80021a0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3301      	adds	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	3b0a      	subs	r3, #10
 800219e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	2b09      	cmp	r3, #9
 80021a4:	d8f6      	bhi.n	8002194 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b2db      	uxtb	r3, r3
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	b2db      	uxtb	r3, r3
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7bdb      	ldrb	r3, [r3, #15]
 8002216:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7b5b      	ldrb	r3, [r3, #13]
 800221c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7b9b      	ldrb	r3, [r3, #14]
 8002222:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	e06f      	b.n	800230a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d011      	beq.n	8002254 <RTC_DateUpdate+0x5c>
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d00e      	beq.n	8002254 <RTC_DateUpdate+0x5c>
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b05      	cmp	r3, #5
 800223a:	d00b      	beq.n	8002254 <RTC_DateUpdate+0x5c>
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b07      	cmp	r3, #7
 8002240:	d008      	beq.n	8002254 <RTC_DateUpdate+0x5c>
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b08      	cmp	r3, #8
 8002246:	d005      	beq.n	8002254 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2b0a      	cmp	r3, #10
 800224c:	d002      	beq.n	8002254 <RTC_DateUpdate+0x5c>
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	d117      	bne.n	8002284 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b1e      	cmp	r3, #30
 8002258:	d803      	bhi.n	8002262 <RTC_DateUpdate+0x6a>
      {
        day++;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002260:	e050      	b.n	8002304 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b0c      	cmp	r3, #12
 8002266:	d005      	beq.n	8002274 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	3301      	adds	r3, #1
 800226c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800226e:	2301      	movs	r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002272:	e047      	b.n	8002304 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002274:	2301      	movs	r3, #1
 8002276:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002278:	2301      	movs	r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
          year++;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3301      	adds	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002282:	e03f      	b.n	8002304 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d008      	beq.n	800229c <RTC_DateUpdate+0xa4>
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b06      	cmp	r3, #6
 800228e:	d005      	beq.n	800229c <RTC_DateUpdate+0xa4>
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b09      	cmp	r3, #9
 8002294:	d002      	beq.n	800229c <RTC_DateUpdate+0xa4>
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b0b      	cmp	r3, #11
 800229a:	d10c      	bne.n	80022b6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b1d      	cmp	r3, #29
 80022a0:	d803      	bhi.n	80022aa <RTC_DateUpdate+0xb2>
      {
        day++;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3301      	adds	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80022a8:	e02c      	b.n	8002304 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	3301      	adds	r3, #1
 80022ae:	613b      	str	r3, [r7, #16]
        day = 1U;
 80022b0:	2301      	movs	r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80022b4:	e026      	b.n	8002304 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d123      	bne.n	8002304 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b1b      	cmp	r3, #27
 80022c0:	d803      	bhi.n	80022ca <RTC_DateUpdate+0xd2>
      {
        day++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3301      	adds	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e01c      	b.n	8002304 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b1c      	cmp	r3, #28
 80022ce:	d111      	bne.n	80022f4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 f839 	bl	800234c <RTC_IsLeapYear>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <RTC_DateUpdate+0xf0>
        {
          day++;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	e00d      	b.n	8002304 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	3301      	adds	r3, #1
 80022ec:	613b      	str	r3, [r7, #16]
          day = 1U;
 80022ee:	2301      	movs	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	e007      	b.n	8002304 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b1d      	cmp	r3, #29
 80022f8:	d104      	bne.n	8002304 <RTC_DateUpdate+0x10c>
      {
        month++;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	3301      	adds	r3, #1
 80022fe:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002300:	2301      	movs	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	3301      	adds	r3, #1
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d38b      	bcc.n	800222a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	b2da      	uxtb	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	4619      	mov	r1, r3
 8002334:	6978      	ldr	r0, [r7, #20]
 8002336:	f000 f83b 	bl	80023b0 <RTC_WeekDayNum>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	731a      	strb	r2, [r3, #12]
}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	e01d      	b.n	80023a2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	4a10      	ldr	r2, [pc, #64]	; (80023ac <RTC_IsLeapYear+0x60>)
 800236a:	fba2 1203 	umull	r1, r2, r2, r3
 800236e:	0952      	lsrs	r2, r2, #5
 8002370:	2164      	movs	r1, #100	; 0x64
 8002372:	fb01 f202 	mul.w	r2, r1, r2
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	4a09      	ldr	r2, [pc, #36]	; (80023ac <RTC_IsLeapYear+0x60>)
 8002386:	fba2 1203 	umull	r1, r2, r2, r3
 800238a:	09d2      	lsrs	r2, r2, #7
 800238c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002390:	fb01 f202 	mul.w	r2, r1, r2
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80023a0:	2300      	movs	r3, #0
  }
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	51eb851f 	.word	0x51eb851f

080023b0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
 80023bc:	4613      	mov	r3, r2
 80023be:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80023ce:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d82d      	bhi.n	8002432 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	4a2c      	ldr	r2, [pc, #176]	; (8002494 <RTC_WeekDayNum+0xe4>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	085a      	lsrs	r2, r3, #1
 80023ea:	78bb      	ldrb	r3, [r7, #2]
 80023ec:	441a      	add	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	441a      	add	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	441a      	add	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	4926      	ldr	r1, [pc, #152]	; (8002498 <RTC_WeekDayNum+0xe8>)
 8002400:	fba1 1303 	umull	r1, r3, r1, r3
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	1ad2      	subs	r2, r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	3b01      	subs	r3, #1
 800240c:	4922      	ldr	r1, [pc, #136]	; (8002498 <RTC_WeekDayNum+0xe8>)
 800240e:	fba1 1303 	umull	r1, r3, r1, r3
 8002412:	09db      	lsrs	r3, r3, #7
 8002414:	4413      	add	r3, r2
 8002416:	1d1a      	adds	r2, r3, #4
 8002418:	4b20      	ldr	r3, [pc, #128]	; (800249c <RTC_WeekDayNum+0xec>)
 800241a:	fba3 1302 	umull	r1, r3, r3, r2
 800241e:	1ad1      	subs	r1, r2, r3
 8002420:	0849      	lsrs	r1, r1, #1
 8002422:	440b      	add	r3, r1
 8002424:	0899      	lsrs	r1, r3, #2
 8002426:	460b      	mov	r3, r1
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	1a5b      	subs	r3, r3, r1
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e029      	b.n	8002486 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	4a15      	ldr	r2, [pc, #84]	; (8002494 <RTC_WeekDayNum+0xe4>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	085a      	lsrs	r2, r3, #1
 8002446:	78bb      	ldrb	r3, [r7, #2]
 8002448:	441a      	add	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	441a      	add	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	441a      	add	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4910      	ldr	r1, [pc, #64]	; (8002498 <RTC_WeekDayNum+0xe8>)
 8002458:	fba1 1303 	umull	r1, r3, r1, r3
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	1ad2      	subs	r2, r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	490d      	ldr	r1, [pc, #52]	; (8002498 <RTC_WeekDayNum+0xe8>)
 8002464:	fba1 1303 	umull	r1, r3, r1, r3
 8002468:	09db      	lsrs	r3, r3, #7
 800246a:	4413      	add	r3, r2
 800246c:	1c9a      	adds	r2, r3, #2
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <RTC_WeekDayNum+0xec>)
 8002470:	fba3 1302 	umull	r1, r3, r3, r2
 8002474:	1ad1      	subs	r1, r2, r3
 8002476:	0849      	lsrs	r1, r1, #1
 8002478:	440b      	add	r3, r1
 800247a:	0899      	lsrs	r1, r3, #2
 800247c:	460b      	mov	r3, r1
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	1a5b      	subs	r3, r3, r1
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	b2db      	uxtb	r3, r3
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	38e38e39 	.word	0x38e38e39
 8002498:	51eb851f 	.word	0x51eb851f
 800249c:	24924925 	.word	0x24924925

080024a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e03f      	b.n	8002532 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7fe f850 	bl	800056c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2224      	movs	r2, #36	; 0x24
 80024d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f829 	bl	800253c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002508:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002518:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002576:	f023 030c 	bic.w	r3, r3, #12
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	430b      	orrs	r3, r1
 8002582:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a2c      	ldr	r2, [pc, #176]	; (8002650 <UART_SetConfig+0x114>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d103      	bne.n	80025ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025a4:	f7fe ff9e 	bl	80014e4 <HAL_RCC_GetPCLK2Freq>
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	e002      	b.n	80025b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025ac:	f7fe ff86 	bl	80014bc <HAL_RCC_GetPCLK1Freq>
 80025b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	009a      	lsls	r2, r3, #2
 80025bc:	441a      	add	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	4a22      	ldr	r2, [pc, #136]	; (8002654 <UART_SetConfig+0x118>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	0119      	lsls	r1, r3, #4
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	009a      	lsls	r2, r3, #2
 80025dc:	441a      	add	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025e8:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <UART_SetConfig+0x118>)
 80025ea:	fba3 0302 	umull	r0, r3, r3, r2
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2064      	movs	r0, #100	; 0x64
 80025f2:	fb00 f303 	mul.w	r3, r0, r3
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	3332      	adds	r3, #50	; 0x32
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <UART_SetConfig+0x118>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002608:	4419      	add	r1, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	009a      	lsls	r2, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <UART_SetConfig+0x118>)
 8002622:	fba3 0302 	umull	r0, r3, r3, r2
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2064      	movs	r0, #100	; 0x64
 800262a:	fb00 f303 	mul.w	r3, r0, r3
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	3332      	adds	r3, #50	; 0x32
 8002634:	4a07      	ldr	r2, [pc, #28]	; (8002654 <UART_SetConfig+0x118>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	f003 020f 	and.w	r2, r3, #15
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	440a      	add	r2, r1
 8002646:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40013800 	.word	0x40013800
 8002654:	51eb851f 	.word	0x51eb851f

08002658 <__libc_init_array>:
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	2500      	movs	r5, #0
 800265c:	4e0c      	ldr	r6, [pc, #48]	; (8002690 <__libc_init_array+0x38>)
 800265e:	4c0d      	ldr	r4, [pc, #52]	; (8002694 <__libc_init_array+0x3c>)
 8002660:	1ba4      	subs	r4, r4, r6
 8002662:	10a4      	asrs	r4, r4, #2
 8002664:	42a5      	cmp	r5, r4
 8002666:	d109      	bne.n	800267c <__libc_init_array+0x24>
 8002668:	f000 f822 	bl	80026b0 <_init>
 800266c:	2500      	movs	r5, #0
 800266e:	4e0a      	ldr	r6, [pc, #40]	; (8002698 <__libc_init_array+0x40>)
 8002670:	4c0a      	ldr	r4, [pc, #40]	; (800269c <__libc_init_array+0x44>)
 8002672:	1ba4      	subs	r4, r4, r6
 8002674:	10a4      	asrs	r4, r4, #2
 8002676:	42a5      	cmp	r5, r4
 8002678:	d105      	bne.n	8002686 <__libc_init_array+0x2e>
 800267a:	bd70      	pop	{r4, r5, r6, pc}
 800267c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002680:	4798      	blx	r3
 8002682:	3501      	adds	r5, #1
 8002684:	e7ee      	b.n	8002664 <__libc_init_array+0xc>
 8002686:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800268a:	4798      	blx	r3
 800268c:	3501      	adds	r5, #1
 800268e:	e7f2      	b.n	8002676 <__libc_init_array+0x1e>
 8002690:	08002708 	.word	0x08002708
 8002694:	08002708 	.word	0x08002708
 8002698:	08002708 	.word	0x08002708
 800269c:	0800270c 	.word	0x0800270c

080026a0 <memset>:
 80026a0:	4603      	mov	r3, r0
 80026a2:	4402      	add	r2, r0
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d100      	bne.n	80026aa <memset+0xa>
 80026a8:	4770      	bx	lr
 80026aa:	f803 1b01 	strb.w	r1, [r3], #1
 80026ae:	e7f9      	b.n	80026a4 <memset+0x4>

080026b0 <_init>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	bf00      	nop
 80026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b6:	bc08      	pop	{r3}
 80026b8:	469e      	mov	lr, r3
 80026ba:	4770      	bx	lr

080026bc <_fini>:
 80026bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026be:	bf00      	nop
 80026c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c2:	bc08      	pop	{r3}
 80026c4:	469e      	mov	lr, r3
 80026c6:	4770      	bx	lr
